/**
 * Created by w44 on 15-1-8.
 */


var CronJob = require('cron').CronJob;
var moment = require('moment');
var async = require('async');
var nodePlatAssist = require('print_assist').nodePlatAssist;
var uuid = require('node-uuid');
var cons = require('print_constants');
var nodePlatCons = cons.nodePlatCons;
var terminalCons = cons.terminalCons;
var util = require('print_util');
var mongoDBUtil = util.mongoDBUtil;
var terminalDataUtil = util.terminalDataUtil;
var scanDataTrans = util.scanDataTrans;
var log = util.log;
var memory = require('print_memory');
var terminalArray = memory.terminalArray;
var webIo = memory.webIo;

var TicketControl = function () {
};

TicketControl.prototype.run = function () {
    var self = this;
    //开启出票任务
    self.newSendPrintTicket();
    //self.sendPrintTicket.start();
    self.dealPrintSuccessToPlat.start();
    self.dealPrintWaitTickets.start();
    self.updateEveryAmount.start();
};
//新的发送票给终端机逻辑
TicketControl.prototype.newSendPrintTicket = function () {
       var self = this;
    var sendCorn = new CronJob('*/1 * * * * *',function(){
        log.info('#########体彩出票######### 出票任务');
        var startSendTicketTime = moment().format('YYYY-MM-DD HH:mm:ss');
        log.info("开始送票的时间startSendTicketTime是："+ startSendTicketTime);
        async.waterfall([
            //第一步查询状态在等待出票的终端机
            function (cb) {
                //检查是否有可用终端机
                var terminals = [];
                for (var j = 0; j < terminalArray.length; j++) {
                    if (terminalArray[j].gameCode && terminalArray[j].status == terminalCons.terminal.status.available) {
                        terminals.push(terminalArray[j]);
                    }
                }
                if (terminals.length > 0) {
                    cb(null, terminals);
                }else{
                    cb("没有可用的终端机");
                }
            },
            //给每个终端机一张票
            function(terminals, cb){
                mongoDBUtil.db.collection('terminal', {safe: true}, function(err, collection){
                    async.eachSeries(terminals, function(terminal, callback){
                        collection.findOne({"id": terminal.terminalId}, function (err, dataTerminal) {
                            log.info("查找到需要出票的终端机：" + dataTerminal);
                            if (err) {
                                //循环下一个终端机
                                log.error(err);
                                callback(null);
                            } else {
                                //找到终端机信息
                                if(dataTerminal != undefined && dataTerminal!= null) {
                                    self.terminalInsertTicket(terminal, dataTerminal, function (err) {
                                        callback(err);
                                    });
                                }else{
                                    log.error("mongodb没有查询到终端机配置信息");
                                    callback(null);
                                }
                            }
                        });
                    },function(err){
                        cb(err);
                    });
                })
            }
        ],function(err ){
            if(err){
                log.error(err)
            }
        });
    });
    sendCorn.start();

}

TicketControl.prototype.terminalInsertTicket= function(terminal, dataTerminal, cb){
    async.waterfall([
        function(cb){
            //找票
            if(dataTerminal.gameCode){
                var gameCode = new Array();
                for(var key in dataTerminal.gameCode){
                    gameCode.push(key);
                }
                mongoDBUtil.db.collection('waitTerminalTicket', {safe: true}, function (err, collection) {
                    collection.findOneAndDelete({'gameCode':{$in:gameCode}},{sort:{id:1}},  function (err, result) {
                       if(err){
                           log.error(err);
                           cb(null);
                       }else{
                           cb(null, result);
                       }
                    });
                });
            }else{
                log.error("**终端机游戏不正确***");
                cb(null);
            }
        },
        function(result, cb){
            if(result && result.value != null){
                var ticket = result.value;
                if(dataTerminal.preAmount != 0 && dataTerminal.everyCurrAmount+ ticket.amount > dataTerminal.preAmount){
                    mongoDBUtil.db.collection('waitTerminalTicket', {safe: true}, function (err, collection) {
                        delete ticket["_id"];
                        collection.insertOne(ticket,{},function(err){
                            log.error("终端机: "+ terminal.id +"今天出票量过大。不足以出这张票" + ticket.id);
                            cb(null);
                        })
                    });
                }else{
                    terminal.status = terminalCons.terminal.status.inPrint;
                    terminal.terminal.status = terminalCons.terminal.status.inPrint;
                    terminal.terminal.preAmount = dataTerminal.preAmount;
                    terminal.terminal.amount = dataTerminal.amount;
                    var msg = JSON.stringify(terminal.terminal);
                    webIo.io.emit('statusChange', msg);
                    ticket.seqId =  uuid.v4().replace(/\-/g, '');
                    ticket.takeTime =  new Date().getTime();
                    ticket.terminalTakeTime = moment().format('YYYY-MM-DD HH:mm:ss');
                    ticket.terminalId = terminal.terminalId;
                    cb(null, ticket);
                }
            }
        },
        function(_ticket, cb){
            if(_ticket){
                //转移库,并发送
                mongoDBUtil.db.collection('waitTerminal' + terminal.terminalName, {safe: true}, function (err, collection) {
                    collection.insertOne(_ticket,{}, function () {
                        log.info(_ticket.id + '已进入' + terminal.terminalName + '等待处理库');
                        var headNode = {};
                        headNode.cmd = '0002';
                        headNode.sequenceId = _ticket.seqId;
                        headNode.terminalId = terminal.terminalId;
                        var bodyNode = {};
                        var ticketTrans = new Array();
                        //转换数据
                        var ticket = {};
                        if (_ticket.gameCode == 'T53') {
                            //十四场不同,注意区分
                            if (_ticket.playTypeCode == '01') {
                                ticket.namedata = moment().add(20, 'minute').format('YYMMDDHHmmss') + '-' + _ticket.id + '-' + terminalDataUtil.gameCodeTrans[_ticket.gameCode].code01 + '-' + terminalDataUtil.gameCodeTrans[_ticket.gameCode].playType[_ticket.playTypeCode + _ticket.betTypeCode].tCode + '-05005-' + _ticket.amount;
                            } else {
                                ticket.namedata = moment().add(20, 'minute').format('YYMMDDHHmmss') + '-' + _ticket.id + '-' + terminalDataUtil.gameCodeTrans[_ticket.gameCode].code02 + '-' + terminalDataUtil.gameCodeTrans[_ticket.gameCode].playType[_ticket.playTypeCode + _ticket.betTypeCode].tCode + '-05005-' + _ticket.amount;
                            }
                        } else if (_ticket.gameCode == 'T05' || _ticket.gameCode == 'T06') {
                            ticket.namedata = moment(_ticket.closeTime).format('YYMMDDHHmmss') + '-' + _ticket.id + '-' + terminalDataUtil.gameCodeTrans[_ticket.gameCode].code + '-' + terminalDataUtil.gameCodeTrans[_ticket.gameCode].playType[_ticket.playTypeCode + _ticket.betTypeCode].tCode + '-' + _ticket.termCode + '-' + _ticket.amount;
                        } else if (_ticket.gameCode == 'T51') {
                            //竞彩足球
                            //按键口
                            // ticket.namedata = moment(_ticket.closeTime).format('YYMMDDHHmmss') + '-' + _ticket.id + '-' + terminalDataUtil.jcPlayTypeCodeTrans[_ticket.gameCode][_ticket.playTypeCode] + '-' + terminalDataUtil.gameCodeTrans[_ticket.gameCode].tCode + '-' + _ticket.termCode + '-' + _ticket.amount;
                            //扫描口
                            ticket.namedata = moment(_ticket.closeTime).format('YYMMDDHHmmss') + '-' + _ticket.id + '-' + terminalDataUtil.jcPlayTypeCodeTrans[_ticket.gameCode][_ticket.playTypeCode] + '-' + terminalDataUtil.gameCodeTrans[_ticket.gameCode + 'SM'].tCode + '-' + _ticket.termCode + '-' + _ticket.amount;

                        } else if (_ticket.gameCode == 'T52') {
                            //竞彩篮球
                            ticket.namedata = moment(_ticket.closeTime).format('YYMMDDHHmmss') + '-' + _ticket.id + '-' + terminalDataUtil.jcPlayTypeCodeTrans[_ticket.gameCode][_ticket.playTypeCode] + '-' + terminalDataUtil.gameCodeTrans[_ticket.gameCode].tCode + '-' + _ticket.termCode + '-' + _ticket.amount;
                        } else {
                            log.error("ticket[i]=========="+JSON.stringify(_ticket));
                            log.error(_ticket.gameCode);
                            log.error(_ticket.betTypeCode);
                            ticket.namedata = moment(_ticket.auditTime).format('YYMMDDHHmmss') + '-' + _ticket.id + '-' + terminalDataUtil.gameCodeTrans[_ticket.gameCode].code + '-' + terminalDataUtil.gameCodeTrans[_ticket.gameCode].playType[_ticket.playTypeCode + _ticket.betTypeCode].tCode +'-' + _ticket.termCode +'-' + _ticket.amount;
                            log.error("文件名");
                            log.error(_ticket.gameCode);
                            log.error('========================');
                            log.error(JSON.stringify(_ticket));
                        }
                        ticket.namelen = ticket.namedata.length;
                        //号码相关
                        var numbers;
                        if (nodePlatCons.mode == 'test') {
                            if (typeof _ticket.numbers == 'undefined') {
                                _ticket.numbers = _ticket.number;
                            }
                            numbers = terminalDataUtil.numberTrans(_ticket.gameCode, _ticket.playTypeCode, _ticket.betTypeCode, _ticket.numbers);
                        }
                        if (_ticket.gameCode == 'T53' || _ticket.gameCode == 'T54' || _ticket.gameCode == 'T55') {
                            var zcTerm = termUtil.zcSellTerm();
                            var index = '-:' + zcTerm[_ticket.gameCode][_ticket.termCode].index + '\n';
                            ticket.data = terminalDataUtil.transNumbers(_ticket.gameCode, _ticket.playTypeCode, _ticket.betTypeCode, _ticket.multiple) + index + numbers + '\n';
                        } else if (_ticket.gameCode == 'T51') {
                            //按键
                            //ticket.data = terminalDataUtil.transNumbers(_ticket.gameCode, _ticket.playTypeCode, _ticket.betTypeCode, _ticket.multiple) + numbers + '\n';
                            //扫描
                            ticket.data = scanDataTrans.jcScanNumberTrans(_ticket);
                            if(!ticket.data || ticket.playTypeCode=='06'){
                                //如果出错，转为按键
                                ticket.namedata = moment(_ticket.closeTime).format('YYMMDDHHmmss') + '-' + _ticket.id + '-' + terminalDataUtil.jcPlayTypeCodeTrans[_ticket.gameCode][_ticket.playTypeCode] + '-' + terminalDataUtil.gameCodeTrans[_ticket.gameCode].tCode + '-' + _ticket.termCode + '-' + _ticket.amount;
                                ticket.namelen = ticket.namedata.length;

                                ticket.data = terminalDataUtil.transNumbers(_ticket.gameCode, _ticket.playTypeCode, _ticket.betTypeCode, _ticket.multiple) + numbers + '\n';
                            }
                        } else {
                            ticket.data = terminalDataUtil.transNumbers(_ticket.gameCode, _ticket.playTypeCode, _ticket.betTypeCode, _ticket.multiple) + numbers + '\n';
                        }
                        ticket.datalen = ticket.data.length;
                        ticketTrans.push(ticket);
                        bodyNode.tickets = ticketTrans;
                        terminal.terminalControl.send0002(headNode, bodyNode);
                        cb(null);
                    });
                });
            }else{
                cb(null);
            }
        }
    ],function(err){
        cb(err);
    })
}

//二代系统
TicketControl.prototype.sendPrintTicket = new CronJob('*/2 * * * * *', function () {
    log.info('#########体彩出票######### 出票任务');
    var sendprintTicketStartTime = new Date().getTime();
        var startSendTicketTime = moment().format('YYYY-MM-DD HH:mm:ss');
        log.info("开始送票的时间startSendTicketTime是："+ startSendTicketTime);
    async.waterfall([function (cb) {
        /**
         * 1.从配置文件中读取所有的彩种
         * 1.1.检查可用终端机
         * 2.循环findAndRemove
         * 3.同一彩种写入同一数组
         * 4.批量处理
         */
         //送票开始时间
		
        var gameCodeArr = nodePlatCons.gamCodeArray;


        //todo 最终的cb只能调用一次
        for (var i = 0; i < gameCodeArr.length; i++) {
            //检查是否有可用终端机
            var terminals = [];
            for (var j = 0; j < terminalArray.length; j++) {
                if (terminalArray[j].gameCode && terminalArray[j].gameCode[gameCodeArr[i]] && terminalArray[j].status == terminalCons.terminal.status.available) {
                    terminals.push(terminalArray[j]);
                }
            }
            
            if (terminals.length > 0) {
                //有当前彩种可用终端机
                cb(null, terminals, gameCodeArr[i]);
            } else {
                cb('没有可用的终端机');
            }
        }
    }, function (terminals, gameCode, cb) {
        var arr = [];
        var array = new Array();
      var index = 1;
        /*if (gameCode == 'T05' || gameCode == 'T06' || gameCode == 'T51' || gameCode == 'T52') {
            index = 1;
        }
        ;*/
        for (var i = 0; i < index; i++) {
            array.push(i);
        } ;

        //var now = parseInt(moment().format('HH'));
        //if (now > 19 && gameCode != 'T05' && gameCode != 'T06') {
        //    cb('8点以后不打普通彩种');
        //};
        mongoDBUtil.db.collection('waitTerminalTicket', {safe: true}, function (err, collection) {
            var tempAmount = 0;
            /*collection.find({'gameCode':gameCode}).sort({'auditTime':1}).limit(2).toArray(function(err, datas){
                if(datas.length>0){
                    for(var j=0;j<datas.length;j++){
                       arr.push(datas[j]);
                       tempAmount += datas[j].amount;
                       collection.remove({'id':datas[j].id}, {safe: true}, function () {});
                    }
                    //callback(null);
                    cb(terminals, gameCode, arr, tempAmount);
                }
            })*/
             async.each(array, function (item, callback) {
                 collection.findAndRemove({'gameCode': gameCode},  function (err, result) {                   	
                    if (result.value!=null) {
                        arr.push(result.value);
                         tempAmount += result.amount;
                     }
                     callback(null);
                  })
             }, function (err) {
                 cb(null, terminals, gameCode, arr, tempAmount);
             })
        });
    }, function (terminals, gameCode, tickets,tempAmount, cb) {
        //判断集合大小
        if (tickets.length > 0) {
            //有可用票
			log.info('可用票的长度===='+ tickets.length);
            cb(null, terminals, tickets, tempAmount);
        } else {
            cb('没有票');
        }
    }, function (terminals, tickets,tempAmount,  cb) {
        //随机一个终端机
        var terminal = terminals[Math.floor(Math.random() * terminals.length)];
        if (terminal.status == terminalCons.terminal.status.available) {
            mongoDBUtil.db.collection('terminal', {safe: true}, function(err, collection){
                collection.findOne({"id": terminal.terminalId}, function (err, dataTerminal) {
                    log.info("查找到需要出票的终端机：" + dataTerminal);
                    if(err){
                        cb(err);
                    }else{
                        if(dataTerminal != undefined && dataTerminal!= null){
                            if(dataTerminal.preAmount != 0 && dataTerminal.everyCurrAmount+ tempAmount > dataTerminal.preAmount){
                                mongoDBUtil.db.collection('waitTerminalTicket', {safe: true}, function (err, collection) {
									 log.info("tickets==================" + tickets);
                                    async.each(tickets, function (item) {
                                        delete item['_id'];
                                        collection.insert(item, function () {
                                        })
                                    }, function () {
                                        log.error("终端机: "+ terminal.id +"今天出票量过大。不足以出这部分票");
                                        return;
                                    })
                                })
                            }else{
                                terminal.status = terminalCons.terminal.status.inPrint;
                                terminal.terminal.status = terminalCons.terminal.status.inPrint;
                                terminal.terminal.preAmount = dataTerminal.preAmount;
                                terminal.terminal.amount = dataTerminal.amount;
                                var msg = JSON.stringify(terminal.terminal);


                                webIo.io.emit('statusChange', msg);
                                var ticks = new Array;
                                //给每一张票加上seqID等参数
                                for (var i = 0; i < tickets.length; i++) {
                                    tickets[i].seqId = uuid.v4().replace(/\-/g, '');
                                    tickets[i].takeTime = new Date().getTime();
                                    tickets[i].terminalId = terminal.terminalId;
                                    ticks.push(tickets[i]);
                                }
                                log.info('票长度' + ticks.length);
							
                                cb(null, terminal, ticks);
                            }
                        }else{
                            cb('没有查询到终端机');
                        }
                    }
                })
            });
        } else {
            mongoDBUtil.db.collection('waitTerminalTicket', {safe: true}, function (err, collection) {
				log.info("here.....................");
                async.each(tickets, function (item) {
                    delete item['_id'];
                    collection.insert(item, function () {
                    })
                }, function () {
                    return;
                })
            })
        }
    }, function (terminal, tickets, cb) {
        //修改状态
        //转移库,发送
        mongoDBUtil.db.collection('waitTerminal' + terminal.terminalName, {safe: true}, function (err, collection) {
            async.each(tickets, function (item) {
                item.terminalTakeTime = new Date().getTime();
                collection.insert(item, function () {
                    log.info(item.id + '已进入' + terminal.terminalName + '等待处理库');
                })
            }, function (err) {
            })
        });
        var headNode = {};
        headNode.cmd = '0002';
        headNode.sequenceId = tickets[0].seqId;
        headNode.terminalId = terminal.terminalId;
        var bodyNode = {};
        var ticketTrans = new Array;
        //转换数据
        for (var i = 0; i < tickets.length; i++) {
            var ticket = {};
            if (tickets[i].gameCode == 'T53') {
                //十四场不同,注意区分
                if (tickets[i].playTypeCode == '01') {
                    ticket.namedata = moment().add(20, 'minute').format('YYMMDDHHmmss') + '-' + tickets[i].id + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].code01 + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].playType[tickets[i].playTypeCode + tickets[i].betTypeCode].tCode + '-05005-' + tickets[i].amount;
                } else {
                    ticket.namedata = moment().add(20, 'minute').format('YYMMDDHHmmss') + '-' + tickets[i].id + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].code02 + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].playType[tickets[i].playTypeCode + tickets[i].betTypeCode].tCode + '-05005-' + tickets[i].amount;
                }
            } else if (tickets[i].gameCode == 'T05' || tickets[i].gameCode == 'T06') {
                ticket.namedata = moment(tickets[i].closeTime).format('YYMMDDHHmmss') + '-' + tickets[i].id + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].code + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].playType[tickets[i].playTypeCode + tickets[i].betTypeCode].tCode + '-' + tickets[i].termCode + '-' + tickets[i].amount;
            } else if (tickets[i].gameCode == 'T51') {
                //竞彩足球
                //按键口
                // ticket.namedata = moment(tickets[i].closeTime).format('YYMMDDHHmmss') + '-' + tickets[i].id + '-' + terminalDataUtil.jcPlayTypeCodeTrans[tickets[i].gameCode][tickets[i].playTypeCode] + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].tCode + '-' + tickets[i].termCode + '-' + tickets[i].amount;
                //扫描口
                ticket.namedata = moment(tickets[i].closeTime).format('YYMMDDHHmmss') + '-' + tickets[i].id + '-' + terminalDataUtil.jcPlayTypeCodeTrans[tickets[i].gameCode][tickets[i].playTypeCode] + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode + 'SM'].tCode + '-' + tickets[i].termCode + '-' + tickets[i].amount;

            } else if (tickets[i].gameCode == 'T52') {
                //竞彩篮球
                ticket.namedata = moment(tickets[i].closeTime).format('YYMMDDHHmmss') + '-' + tickets[i].id + '-' + terminalDataUtil.jcPlayTypeCodeTrans[tickets[i].gameCode][tickets[i].playTypeCode] + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].tCode + '-' + tickets[i].termCode + '-' + tickets[i].amount;
            } else {
                log.error("ticket[i]=========="+JSON.stringify(tickets[i]));
                log.error(tickets[i].gameCode);
                log.error(tickets[i].betTypeCode);
                ticket.namedata = moment(tickets[i].auditTime).format('YYMMDDHHmmss') + '-' + tickets[i].id + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].code + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].playType[tickets[i].playTypeCode + tickets[i].betTypeCode].tCode +'-' + tickets[i].termCode +'-' + tickets[i].amount;
                log.error("文件名");
                log.error(tickets[i].gameCode);
                log.error('========================');
                log.error(JSON.stringify(tickets[i]));
            }
            ticket.namelen = ticket.namedata.length;
            //号码相关
            var numbers;
            if (nodePlatCons.mode == 'test') {
                if (typeof tickets[i].numbers == 'undefined') {
                    tickets[i].numbers = tickets[i].number;
                }
                numbers = terminalDataUtil.numberTrans(tickets[i].gameCode, tickets[i].playTypeCode, tickets[i].betTypeCode, tickets[i].numbers);
            }
            if (tickets[i].gameCode == 'T53' || tickets[i].gameCode == 'T54' || tickets[i].gameCode == 'T55') {
                var zcTerm = termUtil.zcSellTerm();
                var index = '-:' + zcTerm[tickets[i].gameCode][tickets[i].termCode].index + '\n';
                ticket.data = terminalDataUtil.transNumbers(tickets[i].gameCode, tickets[i].playTypeCode, tickets[i].betTypeCode, tickets[i].multiple) + index + numbers + '\n';
            } else if (tickets[i].gameCode == 'T51' ||tickets[i].gameCode == 'T52' ) {
                //按键
                //ticket.data = terminalDataUtil.transNumbers(tickets[i].gameCode, tickets[i].playTypeCode, tickets[i].betTypeCode, tickets[i].multiple) + numbers + '\n';
                //扫描
                ticket.data = scanDataTrans.jcScanNumberTrans(tickets[i]);
                if(!ticket.data || ticket.playTypeCode=='06'){
                    //如果出错，转为按键
                    ticket.namedata = moment(tickets[i].closeTime).format('YYMMDDHHmmss') + '-' + tickets[i].id + '-' + terminalDataUtil.jcPlayTypeCodeTrans[tickets[i].gameCode][tickets[i].playTypeCode] + '-' + terminalDataUtil.gameCodeTrans[tickets[i].gameCode].tCode + '-' + tickets[i].termCode + '-' + tickets[i].amount;
                    ticket.namelen = ticket.namedata.length;

                    ticket.data = terminalDataUtil.transNumbers(tickets[i].gameCode, tickets[i].playTypeCode, tickets[i].betTypeCode, tickets[i].multiple) + numbers + '\n';
                }
            } else {
                ticket.data = terminalDataUtil.transNumbers(tickets[i].gameCode, tickets[i].playTypeCode, tickets[i].betTypeCode, tickets[i].multiple) + numbers + '\n';
            }
            ticket.datalen = ticket.data.length;
            ticketTrans.push(ticket);
        }
        bodyNode.tickets = ticketTrans;
        terminal.terminalControl.send0002(headNode, bodyNode);
        cb(null);
    }], function (err, result) {
        if (err) {
            log.info('err: ', err); // -> null
        }
    })
}, null, false, 'Asia/Chongqing');


//将出票成功且没有及时返回的票再次给平台
TicketControl.prototype.dealPrintSuccessToPlat = new CronJob('*/3 * * * * *', function () {
    log.info('#########出票######### 将出票成功且没有及时返回的票再次给平台(竟彩)');
    mongoDBUtil.db.collection('TerminalPrintSuccess', {safe: true}, function (err, collection) {
        collection.find({
            platStatus: {$ne: '0000'}
        }).toArray(function (err, tickets) {
            if (!err && tickets) {
                async.eachSeries(tickets, function (result, cb) {
                    log.error('补发P02响应:' + result.id);
                    nodePlatAssist.sentP02(result, function (err, backMsgNode) {
                        //todo  处理平台返回
                        if (!err) {
                            mongoDBUtil.db.collection('TerminalPrintSuccess', {safe: true}, function (err, collection) {
                                collection.findOneAndUpdate({id: result.id, platStatus: {$ne: '0000'}}, {
                                    $set: {platStatus: '0000'}
                                }, {}, function (err, res) {
                                    log.info(result.id + '平台状态 : ' + '0000');
                                    cb();
                                })
                            });
                        }else{
                            mongoDBUtil.db.collection('TerminalPrintSuccess', {safe: true}, function (err, collection) {
                                collection.findOneAndUpdate({id: result.id, platStatus: {$ne: '0000'}}, {
                                    $set: {platStatus: '0000'}
                                }, {}, function (err, res) {
                                    log.info(result.id + '平台状态 : ' + '0000');
                                    mongoDBUtil.db.collection('repeatTicket', {safe: true}, function (err, _coll) {
                                        _coll.insertOne(result,{}, function(err){
                                            log.info("*****疑似重复出票*******" + result.id);
                                        });
                                    });
                                })
                            });
                        }
                    });
                }, function (err) {
                    if(err){
                        log.error(err);
                    }
                })
            }
        })
    })
}, null, false, 'Asia/Chongqing');


//*/7 * * * * *
//0 */3 * * * *

TicketControl.prototype.dealPrintWaitTickets = new CronJob('0 */1 * * * *', function () {
    log.info('*******已开始执行未返回票任务***********');
    async.waterfall([function (cb) {
        mongoDBUtil.db.collection('terminal', {safe: true}, function (err, collection) {
            collection.find({'status': {$ne: terminalCons.terminal.status.notAvailable}}).toArray(function (err, terminals) {
                //遍历所有处于可用状态的终端机
                for (var i = 0; i < terminals.length; i++) {
                    cb(null, terminals[i]);
                }
            })
        })
    }, function (terminal, cb) {
        //获取到该终端机的集合
        try {
            mongoDBUtil.db.collection('waitTerminal' + terminal.terminalName, {safe: true}, function (err, collection) {
                collection.find().toArray(function (err, tickets) {
                    //获取到所有等待返回的票,准备处理
                    for (var i = 0; i < tickets.length; i++) {
                        cb(null, terminal, tickets[i]);
                    }
                })
            })
        } catch (err) {
            mongoDBUtil.db.createCollection('waitTerminal' + terminal.terminalName, {safe: true}, function (err, collection) {
                collection.find().toArray(function (err, tickets) {
                    //获取到所有等待返回的票,准备处理
                    for (var i = 0; i < tickets.length; i++) {
                        cb(null, terminal, tickets[i]);
                    }
                })
            })
        }

    }, function (terminal, ticket, cb) {
        //获取到当前票,准备处理
        var nowTime = new Date().getTime();
        //暂定2分钟 2*60*1000
        if (nowTime - ticket.takeTime > 180000) {
            //查询到所属终端机,发送查询请求
            if (terminalArray.length > 0) {
                for (var i = 0; i < terminalArray.length; i++) {
                    if (terminalArray[i].terminal.id == terminal.id) {
                        cb(null, terminalArray[i], ticket);
                    }
                }
            } else {
                log.info('terminalTask在执行中没有发现可用终端' + new Date().getTime());
                return;
            }
        } else {
            //所有票都小于1分钟 or 当前没有可用的终端
            //logger.info('terminalTask在执行中没有发现超时任务');
            return;
        }
    }, function (terminal, ticket, cb) {
        log.info("**准备发送0005 查询票是否成功**");
        log.info(ticket);
        var headNode = {
            cmd: '0005',
            sequenceId: uuid.v4().replace(/\-/g, ''),
            terminalId: terminal.terminalId
        };
        var bodyNode = {
            ticketid: ticket.id
        };
        terminal.terminalControl.send0005(headNode, bodyNode);
        cb(null);
    }], function (err, result) {
        if (err) {
            log.info('err: ', err); // -> null
            log.info('result: ', result); // -> 16
        }
    })

}, null, false, 'Asia/Chongqing');

TicketControl.prototype.updateEveryAmount = new CronJob('0 0 0/2 * * *', function () {
    log.info('每天凌晨2点初始化每天销售金额');
    mongoDBUtil.db.collection('terminal', {safe: true}, function (err, collection) {
        collection.update({},{$set:{everyCurrAmount:0}}, {multi:true}, function (err, data) {
            log.info("初始化成功");
        })
    })

}, null, false, 'Asia/Chongqing');


var ticketControl = new TicketControl();
module.exports = ticketControl;
