/**
 * Created by Administrator on 2015/1/23.
 */

var source = require('print_source');
var nodePlatSource = source.nodePlatSource;

var util = require('print_util');
var mongoDBUtil = util.mongoDBUtil;
var UserOpLog = util.UserOpLog;
var User = util.User;
var log = util.log;
var uLog = util.uLog;
var Docs = util.Docs;
var uuid = require('node-uuid');

var memory = require('print_memory');
var moment = require('moment');
var terminalArray = memory.terminalArray;

var printControl = require('./PrintControl');

var cons = require('print_constants');
var socketCons = cons.socketCons;
var terminalCons = cons.terminalCons;

var assist = require('print_assist');
var queryAssist = assist.queryAssist;
var terminalAssist = assist.terminalAssist;
var nodePlatAssist = assist.nodePlatAssist;
var self = {};
var SocketControl = function () {
};

SocketControl.prototype.handle = function (cmd, bodyNode, cb) {
    self = this;
    if (typeof self[cmd] === 'function') {
        log.info("######################################3");
        self[cmd](bodyNode, cb, self);
    } else {
        log.error('找不到处理此命令的方法: ' + cmd);
        cb();
    }
};

//登录
SocketControl.prototype.login = function (bodyNode, cb, self) {
    var userName = bodyNode.userName;
    self.userName = userName;
    log.error(userName + '已登录');
    cb(null, socketCons.toSelf, 'login', 'ok');
};

//更改取票任务状态
SocketControl.prototype.catchTicketsStatus = function (bodyNode, cb, self) {
    var status = nodePlatSource.catchWaitQueenTaskStatus;
    if (status) {
        nodePlatSource.catchWaitQueenTask.stop();
        nodePlatSource.catchWaitQueenTaskStatus = false;
    } else {
        nodePlatSource.catchWaitQueenTask.start();
        nodePlatSource.catchWaitQueenTaskStatus = true;
    }
    var userOp = {
        created: moment().format('YYYY-MM-DD HH:mm:ss'),
        userName: self.userName,
        operateDes: '开启取票'
    };
    uLog.info('用户' + userOp.userName + userOp.operateDes);
    var userOpLog = new UserOpLog(userOp);
    userOpLog.save(function(err,log){
        if(err){
            uLog.info('用户' + userOp.userName + userOp.operateDes + '日志存储报错：' + err);
        }
    });
    cb(null, socketCons.toAll, 'catchTicketsStatus', nodePlatSource.catchWaitQueenTaskStatus);
};

//查询取票任务状态
SocketControl.prototype.queryCatchTicketsStatus = function (bodyNode, cb) {
    cb(null, socketCons.toSelf, 'queryCatchTicketsStatus', nodePlatSource.catchWaitQueenTaskStatus);
};


//查询用户列表
SocketControl.prototype.userList = function (bodyNode, cb) {
    var docs = new Docs();
    docs.findAll('customer',function(err,docs){
        cb(err, socketCons.toSelf, 'userList', docs);
    });
};

//添加用户
SocketControl.prototype.addUser = function (bodyNode, cb, self) {
    mongoDBUtil.db.collection('customer', {safe: true}, function (err, collection) {
        collection.find({'userName': bodyNode.userName}).toArray(function (err, datas) {
            if (datas.length === 0) {
                bodyNode.created = moment().format('YYYY-MM-DD HH:mm:ss');
                collection.insert(bodyNode, function () {
                    collection.find().toArray(function (err, datas) {
                        var userOp = {
                            created: moment().format('YYYY-MM-DD HH:mm:ss'),
                            userName: self.userName,
                            operateDes: '添加用户' + bodyNode.userName
                        };
                        uLog.info('用户' + userOp.userName + userOp.operateDes);
                        var userOpLog = new UserOpLog(userOp);
                        userOpLog.save(function(err,log){
                            if(err){
                                uLog.info('用户' + userOp.userName + userOp.operateDes + '日志存储报错：' + err);
                            }
                        });
                        cb(err, socketCons.toAll, 'userList', datas);
                    });
                });
            } else {
                collection.findAndModify({'userName': bodyNode.userName}, {'id': -1}, {$set: bodyNode}, {new: true}, function (err, result) {
                    collection.find().toArray(function (err, datas) {
                        var userOp = {
                            created: moment().format('YYYY-MM-DD HH:mm:ss'),
                            userName: self.userName,
                            operateDes: '修改用户' + bodyNode.userName
                        };
                        uLog.info('用户' + userOp.userName + userOp.operateDes);
                        var userOpLog = new UserOpLog(userOp);
                        userOpLog.save(function(err,log){
                            if(err){
                                uLog.info('用户' + userOp.userName + userOp.operateDes + '日志存储报错：' + err);
                            }
                        });
                        cb(err, socketCons.toAll, 'userList', datas);
                    });
                });
            }
        });
    });
};

//查询终端机列表
SocketControl.prototype.terminalList = function (bodyNode, cb) {
    mongoDBUtil.db.collection('terminal', {safe: true}, function (err, collection) {
        collection.find().toArray(function (err, datas) {
            for (var i = 0; i < datas.length; i++) {
                if (terminalArray.length === 0) {
                    datas[i].status = terminalCons.terminal.status.notAvailable;
                } else {
                    var have = false;
                    for (var n = 0; n < terminalArray.length; n++) {
                        if (datas[i].id == terminalArray[n].terminalId) {
                            datas[i].status=terminalArray[n].status;
                            have = true;
                        }
                    }
                    if (!have) {
                        datas[i].status = terminalCons.terminal.status.notAvailable;
                    }
                }
            }
            cb(err, socketCons.toSelf, 'terminalList', datas);
        });
    });
};

//请求获取等待队列
SocketControl.prototype.waitQueen = function (bodyNode, cb) {
    queryAssist.getWaitQueen(function (err, datas) {
        if (!err) {
            var waitQueen = datas;
            cb(err, socketCons.toSelf, 'waitQueen', waitQueen);
        }
    });
};

//刷新额度
SocketControl.prototype.refeshAmount = function (bodyNode, cb, self) {
    mongoDBUtil.db.collection('terminal', {
        safe: true
    }, function (err, collection) {
        collection.findOne({ 'id': bodyNode.id}, function (err, terminal) {
            var backNode = {
                cmd: '0008',
                sequenceId: uuid.v4().replace(/\-/g, ''),
                terminalId: bodyNode.id
            };
            for (var j = 0; j < terminalArray.length; j++) {
                if (terminal.id == terminalArray[j].terminal.id && terminalArray[j].status != terminalCons.terminal.status.notAvailable) {
                    terminal = terminalArray[j];
                    terminal.terminalControl.send0008(backNode);
                    break;
                }
            }
            var userOp = {
                created: moment().format('YYYY-MM-DD HH:mm:ss'),
                userName: self.userName,
                operateDes: '刷新终端机' + bodyNode.id
            };
            uLog.info('用户' + userOp.userName + userOp.operateDes);
            var userOpLog = new UserOpLog(userOp);
            userOpLog.save(function(err,log){
                if(err){
                    uLog.info('用户' + userOp.userName + userOp.operateDes + '日志存储报错：' + err);
                }
            });
            cb(err);
        });
    });

};


//查询成功票队列

SocketControl.prototype.querySuccessTickets = function (bodyNode, cb) {
    mongoDBUtil.db.collection('TerminalPrintSuccess', {safe: true}, function (err, collection) {
        var skip = (bodyNode.curPage - 1) * bodyNode.limit;
        if(bodyNode.cond){
            if(bodyNode.cond.id){
                var strLen = bodyNode.cond.id.length;
                var get0Len = 32- strLen;
                for(var i=0; i<get0Len; i++){
                    bodyNode.cond.id = '0' + bodyNode.cond.id;
                }
            }
            log.info(bodyNode.cond);
        }
        collection.find(bodyNode.cond).sort({"id": -1}).skip(skip).limit(bodyNode.limit).toArray(function (err, datas) {
            collection.count(bodyNode.cond, {}, function (err, count) {
                var backNode = {};
                backNode.count = count;
                backNode.curPage = bodyNode.curPage;
                backNode.limit = bodyNode.limit;
                backNode.datas = datas;
                cb(err, socketCons.toSelf, 'querySuccessTickets', backNode);
            });

        });
    });

};


//查询等待兑奖票队列
SocketControl.prototype.queryWaitBonusTickets = function (bodyNode, cb) {
    mongoDBUtil.db.collection('TicketsWaitBonus', {safe: true}, function (err, collection) {
        var skip = (bodyNode.curPage - 1) * bodyNode.limit;
        if(bodyNode.cond){
            if(bodyNode.cond.ticketId){
                var strLen = bodyNode.cond.ticketId.length;
                var get0Len = 32- strLen;
                for(var i=0; i<get0Len; i++){
                    bodyNode.cond.ticketId = '0' + bodyNode.cond.ticketId;
                }
            }
            log.info(bodyNode.cond);
        }
        collection.find(bodyNode.cond).skip(skip).limit(bodyNode.limit).toArray(function (err, datas) {
            collection.count(bodyNode.cond, {}, function (err, count) {
                var backNode = {};
                backNode.count = count;
                log.info('count ============= ' + count);
                backNode.curPage = bodyNode.curPage;
                backNode.limit = bodyNode.limit;
                backNode.datas = datas;
                datas.forEach(function(element, index){
                    //log.info('data is ============== ' + JSON.stringify(element) + '\n');
                });
                cb(err, socketCons.toSelf, 'queryWaitBonusTickets', backNode);
            });
        });
    });
};

//查询未兑奖票队列
SocketControl.prototype.queryNotBonusTickets = function (bodyNode, cb) {
    mongoDBUtil.db.collection('TerminalPrintSuccess', {safe: true}, function (err, collection) {

        var skip = (bodyNode.curPage - 1) * bodyNode.limit;
        var queryExpression = {};
        if(bodyNode.cond){
            if(bodyNode.cond.id){
                var strLen = bodyNode.cond.id.length;
                var get0Len = 32- strLen;
                for(var i=0; i<get0Len; i++){
                    bodyNode.cond.id = '0' + bodyNode.cond.id;
                }
                queryExpression.id = bodyNode.cond.id;
            }
            if(bodyNode.cond.termCode){
                queryExpression.termCode = bodyNode.cond.termCode;
            }
            if(bodyNode.cond.gameCode){
                queryExpression.gameCode = bodyNode.cond.gameCode;
            }
            //log.info(bodyNode.cond);
        }
       
        queryExpression.status = {$ne:'1200'};
        log.info('data is ============== ' + JSON.stringify(queryExpression));
        collection.find(queryExpression).skip(skip).limit(bodyNode.limit).toArray(function (err, datas) {
            collection.count(queryExpression, {}, function (err, count) {
                var backNode = {};
                backNode.count = count;
                backNode.curPage = bodyNode.curPage;
                backNode.limit = bodyNode.limit;
                backNode.datas = datas;
                datas.forEach(function(element, index){
                    //log.info('data is ============== ' + JSON.stringify(element) + '\n');
                });
                cb(err, socketCons.toSelf, 'queryNotBonusTickets', backNode);
            });
        });
    });
};

//查询历史票队列
SocketControl.prototype.queryHistoryTickets = function (bodyNode, cb) {
    mongoDBUtil.db.collection('HadBonusTickets', {safe: true}, function (err, collection) {
        var skip = (bodyNode.curPage - 1) * bodyNode.limit;
        if(bodyNode.cond){
            if(bodyNode.cond.ticketId){
                var strLen = bodyNode.cond.ticketId.length;
                var get0Len = 32- strLen;
                for(var i=0; i<get0Len; i++){
                    bodyNode.cond.ticketId = '0' + bodyNode.cond.ticketId;
                }
            }
        }
        collection.find(bodyNode.cond).sort({"id": -1}).skip(skip).limit(bodyNode.limit).toArray(function (err, datas) {
            collection.count(bodyNode.cond, {}, function (err, count) {
                var backNode = {};
                backNode.count = count;
                backNode.curPage = bodyNode.curPage;
                backNode.limit = bodyNode.limit;
                backNode.datas = datas;
                cb(err, socketCons.toSelf, 'queryHistoryTickets', backNode);
            });

        });
    });
};


//查询错误票队列
SocketControl.prototype.queryFailTickets = function (bodyNode, cb) {
    mongoDBUtil.db.collection('failTicket', {safe: true}, function (err, collection) {
        /*var skip = (bodyNode.curPage - 1) * bodyNode.limit;
        if(bodyNode.cond){
            if(bodyNode.cond.id){
                var strLen = bodyNode.cond.id.length;
                var get0Len = 32- strLen;
                for(var i=0; i<get0Len; i++){
                    bodyNode.cond.id = '0' + bodyNode.cond.id;
                }
            }
            log.info(bodyNode.cond);
            collection.find({$or: [{'value.id':bodyNode.cond.id},{'value.gameCode':bodyNode.cond.gameCode},{'value.termCode':bodyNode.cond.termCode}]}).sort({"value.id": -1}).skip(skip).limit(bodyNode.limit).toArray(function (err, datas) {
                collection.count(bodyNode.cond, {}, function (err, count) {
                    log.info('datas ========================= 123');
                    log.info(datas);
                    var backNode = {};
                    backNode.count = count;
                    backNode.curPage = bodyNode.curPage;
                    backNode.limit = bodyNode.limit;
                    backNode.datas = datas;
                    cb(err, socketCons.toSelf, 'queryFailTickets', backNode);
                });
            });
        }else{
            collection.find({}).sort({"value.id": -1}).skip(skip).limit(bodyNode.limit).toArray(function (err, datas) {
                collection.count(bodyNode.cond, {}, function (err, count) {
                    log.info('datas ========================= 123');
                    log.info(datas);
                    var backNode = {};
                    backNode.count = count;
                    backNode.curPage = bodyNode.curPage;
                    backNode.limit = bodyNode.limit;
                    backNode.datas = datas;
                    cb(err, socketCons.toSelf, 'queryFailTickets', backNode);
                });
            });
        }*/
        var skip = (bodyNode.curPage - 1) * bodyNode.limit;
        collection.find(bodyNode.cond).sort({"id": -1}).skip(skip).limit(bodyNode.limit).toArray(function (err, datas) {
            collection.count(bodyNode.cond, {}, function (err, count) {
                var backNode = {};
                backNode.count = count;
                backNode.curPage = bodyNode.curPage;
                backNode.limit = bodyNode.limit;
                backNode.datas = datas;
                cb(err, socketCons.toSelf, 'queryFailTickets', backNode);
            });
        })
    });
};


//查询错误票队列
SocketControl.prototype.rePrint = function (data, cb, self) {
    var query = data.id;
    mongoDBUtil.db.collection('failTicket', {safe: true}, function (err, collection) {
        mongoDBUtil.db.collection('waitTerminalTicket', {safe: true}, function (err, waitTerminalTicket) {
            collection.findAndRemove({'value.id': query}, [], function (err, ticket) {
                //log.info(JSON.stringify(ticket));
                if(ticket.value){
                    var curTicket = ticket.value.value;
                    waitTerminalTicket.insert(curTicket, function () {
                    var userOp = {
                        created: moment().format('YYYY-MM-DD HH:mm:ss'),
                        userName: self.userName,
                        operateDes: '已重新出票' + query
                    };
                    uLog.info('用户' + userOp.userName + userOp.operateDes);
                    var userOpLog = new UserOpLog(userOp);
                    userOpLog.save(function(err,log){
                        if(err){
                            uLog.info('用户' + userOp.userName + userOp.operateDes + '日志存储报错：' + err);
                        }
                    });
                    log.info(curTicket.id + '已重新出票');
                    });
                }
            });
        });
    });
};


//添加终端机
SocketControl.prototype.addTerminal = function (bodyNode, cb, self) {
    mongoDBUtil.db.collection('terminal', {safe: true}, function (err, collection) {
        collection.find({'id': bodyNode.id}).toArray(function (err, datas) {
            if (datas.length === 0) {
                bodyNode.status = 1900;
                bodyNode.everyCurrAmount = 0;
                collection.insert(bodyNode, function () {
                    var userOp = {
                        created: moment().format('YYYY-MM-DD HH:mm:ss'),
                        userName: self.userName,
                        operateDes: '添加终端机' + bodyNode.id
                    };
                    uLog.info('用户' + userOp.userName + userOp.operateDes);
                    var userOpLog = new UserOpLog(userOp);
                    userOpLog.save(function(err,log){
                        if(err){
                            uLog.info('用户' + userOp.userName + userOp.operateDes + '日志存储报错：' + err);
                        }
                    });
                    cb(err, socketCons.toAll, 'addTerminal', bodyNode);
                });
            } else {
                if (bodyNode.status && bodyNode.status != "0000") {
                    log.info("修改终端机状态" + bodyNode.status);
                    printControl.changeTerminalStatus(bodyNode);
                } else {
                    bodyNode.preAmount = parseFloat(bodyNode.preAmount);
                    collection.findAndModify({'id': bodyNode.id}, {'id': -1}, {$set: bodyNode}, {new: true}, function (err, result) {
                        for (var j = 0; j < terminalArray.length; j++) {
                            if (terminalArray[j].terminal.id == bodyNode.id) {
                                terminalArray[j].gameCode = bodyNode.gameCode;
                                break;
                            }
                        }
                        var userOp = {
                            created: moment().format('YYYY-MM-DD HH:mm:ss'),
                            userName: self.userName,
                            operateDes: '修改终端机' + bodyNode.id
                        };
                        uLog.info('用户' + userOp.userName + userOp.operateDes);
                        var userOpLog = new UserOpLog(userOp);
                        userOpLog.save(function(err,log){
                            if(err){
                                uLog.info('用户' + userOp.userName + userOp.operateDes + '日志存储报错：' + err);
                            }
                        });
                        cb(err, socketCons.toAll, 'editTerminal', result);
                    });
                }
            }
        });
    });
};

//添加出票规则
SocketControl.prototype.addSendTicketRule = function (bodyNode, cb, self) {
    bodyNode.flag = 'send';
    log.info(JSON.stringify(bodyNode));
    mongoDBUtil.db.collection('ticketRule', {safe: true}, function (err, collection) {
        collection.find({'flag': bodyNode.flag}).toArray(function (err, datas) {
            if (datas.length === 0) {
                collection.insert(bodyNode, function () {
                    var userOp = {
                        created: moment().format('YYYY-MM-DD HH:mm:ss'),
                        userName: self.userName,
                        operateDes: '添加出票规则'
                    };
                    uLog.info('用户' + userOp.userName + userOp.operateDes);
                    var userOpLog = new UserOpLog(userOp);
                    userOpLog.save(function(err,log){
                        if(err){
                            uLog.info('用户' + userOp.userName + userOp.operateDes + '日志存储报错：' + err);
                        }
                    });
                   //cb(err, socketCons.toAll, 'addSendTicketRule', bodyNode);
                });
            } else {
                collection.findAndModify({'flag': bodyNode.flag} , {$set: bodyNode}, {new: true}, function (err, result) {
                    var userOp = {
                        created: moment().format('YYYY-MM-DD HH:mm:ss'),
                        userName: self.userName,
                        operateDes: '修改出票规则'
                    };
                    uLog.info('用户' + userOp.userName + userOp.operateDes);
                    var userOpLog = new UserOpLog(userOp);
                    userOpLog.save(function(err,log){
                        if(err){
                            uLog.info('用户' + userOp.userName + userOp.operateDes + '日志存储报错：' + err);
                        }
                    });
                    //cb(err, socketCons.toAll, 'editSendTicketRule', result);
                });
            }
        });
    });
};
//添加取票规则

SocketControl.prototype.printTicket = function (bodyNode, cb, self) {
    log.info(bodyNode);
    var terminal;

    for (var j = 0; j < terminalArray.length; j++) {
        if (terminalArray[j].status == terminalCons.terminal.status.print) {
            terminal = terminalArray[j];
            break;
        }
    }
    var result = 0;
    if (!terminal) {
        cb(null, socketCons.toSelf, 'printTicket', result);
    } else {
        terminalAssist.printTicket(terminal.terminalId, bodyNode.id, function (err) {
            if (err) {
                result = 0;
            } else {
                result = 1;
            }
            var userOp = {
                created: moment().format('YYYY-MM-DD HH:mm:ss'),
                userName: self.userName,
                operateDes: '用终端机' + terminal.terminalId + '打印彩票' + bodyNode.id
            };
            uLog.info('用户' + userOp.userName + userOp.operateDes);
            var userOpLog = new UserOpLog(userOp);
            userOpLog.save(function(err,log){
                if(err){
                    uLog.info('用户' + userOp.userName + userOp.operateDes + '日志存储报错：' + err);
                }
            });
            cb(null, socketCons.toSelf, 'printTicket', result);
        });
    }
};

SocketControl.prototype.printHistoryTicketData = function (bodyNode, cb, self) {
    log.info(bodyNode);
    var terminal;

    for (var j = 0; j < terminalArray.length; j++) {
        if (terminalArray[j].status == terminalCons.terminal.status.print) {
            terminal = terminalArray[j];
            break;
        }
    }
    var result = 0;
    if (!terminal) {
        cb(null, socketCons.toSelf, 'printHistoryTicketData', result);
    } else {
        terminalAssist.printHistoryTicket(terminal.terminalId, bodyNode.id, function (err) {
            if (err) {
                result = 0;
            } else {
                result = 1;
            }
            var userOp = {
                created: moment().format('YYYY-MM-DD HH:mm:ss'),
                userName: self.userName,
                operateDes: '用终端机' + terminal.terminalId + '打印历史彩票' + bodyNode.id
            };
            uLog.info('用户' + userOp.userName + userOp.operateDes);
            var userOpLog = new UserOpLog(userOp);
            userOpLog.save(function(err,log){
                if(err){
                    uLog.info('用户' + userOp.userName + userOp.operateDes + '日志存储报错：' + err);
                }
            });
            cb(null, socketCons.toSelf, 'printHistoryTicketData', result);
        });
    }
};


SocketControl.prototype.printBonusTicket = function (bodyNode, cb, self) {
    log.info(bodyNode);
    var terminal;

    for (var j = 0; j < terminalArray.length; j++) {
        if (terminalArray[j].status == terminalCons.terminal.status.print) {
            terminal = terminalArray[j];
            break;
        }
    }
    var result = 0;
    if (!terminal) {
        cb(null, socketCons.toSelf, 'printBonusTicket', result);
    } else {
        terminalAssist.printBonusTicket(terminal.terminalId, bodyNode.id, function (err) {
            if (err) {
                result = 0;
            } else {
                result = 1;
            }
            var userOp = {
                created: moment().format('YYYY-MM-DD HH:mm:ss'),
                userName: self.userName,
                operateDes: '用终端机' + terminal.terminalId + '打印中奖票' + bodyNode.id
            };
            uLog.info('用户' + userOp.userName + userOp.operateDes);
            var userOpLog = new UserOpLog(userOp);
            userOpLog.save(function(err,log){
                if(err){
                    uLog.info('用户' + userOp.userName + userOp.operateDes + '日志存储报错：' + err);
                }
            });
            cb(null, socketCons.toSelf, 'printBonusTicket', result);
        });
    }
};



SocketControl.prototype.reBonus = function (bodyNode, cb, self) {
    log.info(bodyNode);
    mongoDBUtil.db.collection('TicketsWaitBonus', {safe: true}, function (err, collection) {
        collection.findAndModify({ticketId: bodyNode.id}, {'id': -1}, {$set: {status: terminalCons.ticket.status.in}}, {new: true}, function (err, result) {
            if(!err){
                var userOp = {
                    created: moment().format('YYYY-MM-DD HH:mm:ss'),
                    userName: self.userName,
                    operateDes: '已重新出票' + bodyNode.id
                };
                uLog.info('用户' + userOp.userName + userOp.operateDes);
                var userOpLog = new UserOpLog(userOp);
                userOpLog.save(function(err,log){
                    if(err){
                        uLog.info('用户' + userOp.userName + userOp.operateDes + '日志存储报错：' + err);
                    }
                });
                log.info(bodyNode + '： 已经重出');
            }
        });
    });
};

/**
 * 根据页面配置向终端机发送8000 修改延迟时间
 * @type {SocketControl}
 */

SocketControl.prototype.editConfig = function(bodyNode, cb, self){
    log.info("修改延迟时间配置信息");
    log.info(bodyNode);
    mongoDBUtil.db.collection('terminal', {safe: true}, function (err, conn) {
        conn.findAndModify({id: bodyNode.id}, {'id': -1}, {$set: {config: bodyNode.config}}, {new:true}, function(err, result){
            var userOp = {
                created: moment().format('YYYY-MM-DD HH:mm:ss'),
                userName: self.userName,
                operateDes: '修改终端机' + bodyNode.id + '的延迟时间配置信息'
            };
            uLog.info('用户' + userOp.userName + userOp.operateDes);
            var userOpLog = new UserOpLog(userOp);
            userOpLog.save(function(err,log){
                if(err){
                    uLog.info('用户' + userOp.userName + userOp.operateDes + '日志存储报错：' + err);
                }
            });
            for (var i = 0; i < terminalArray.length; i++) {
                if ( bodyNode.id == terminalArray[i].terminalId) {
                   if(terminalArray[i].status != terminalCons.terminal.status.notAvailable){
                       log.info("向终端机" + terminalArray[i].terminalId + "发送8000信息");
                       var sendheadNode = {cmd: '8000', sequenceId: uuid.v4().replace(/\-/g, ''), terminalId: terminalArray[i].terminalId};
                       var sendbodyNode =  bodyNode.config;
                       terminalArray[i].terminalControl.send8000(sendheadNode, sendbodyNode);
                   }
                }
            }
        });
    });
};

SocketControl.prototype.queryTicketsAmount = function (bodyNode, cb) {
    var convertStartTime = (new Date(bodyNode.cond.startTime)).getTime();
    var convertEndTime = (new Date(bodyNode.cond.endTime)).getTime();
    var queryCollection = '';
    var queryExpression = {};
    queryExpression.gameCode = bodyNode.cond.gameCode;
    queryExpression.termCode = bodyNode.cond.termCode;
   //var sortExpression = {};

    if(bodyNode.cond.status === '1200'){
        queryCollection = 'TerminalPrintSuccess';
        queryExpression.terminalId = bodyNode.cond.terminalId;
        queryExpression.takeTime = {$gt:convertStartTime, $lt:convertEndTime || Infinity};
        //sortExpression = {'id': -1};
    }else if(bodyNode.cond.status === '1100'){
        queryCollection = 'HadBonusTickets';
        queryExpression.bonusTime = {$gt:convertStartTime, $lt:convertEndTime || Infinity};
        queryExpression.bonusTerminalId = bodyNode.cond.terminalId;
        //sortExpression = {'ticketId': -1};
    }

    mongoDBUtil.db.collection(queryCollection, {safe: true}, function (err, collection) {
        //var skip = (bodyNode.curPage - 1) * bodyNode.limit;
        log.info(bodyNode.cond);
        log.info("#################开始时间################################");
        log.info(JSON.stringify(queryExpression));
        //.sort(sortExpression).skip(skip).limit(bodyNode.limit)
        collection.find(queryExpression).toArray(function (err, datas) {
                log.info("#################返回的记录数################################");
                log.info(datas.length);
                var backNode = {};
                var totalAmount = 0;
                var preBouns = 0;
                var aftBouns = 0;
                if(datas.length>0){
                   for(var i=0; i<datas.length; i++){
                        totalAmount = totalAmount + parseInt(datas[i].amount)/100;
                        preBouns = preBouns + parseFloat(datas[i].preBouns) || 0;
                        aftBouns = aftBouns + parseFloat(datas[i].aftBouns) || 0;
                    }
                }
                backNode.totalAmount = totalAmount;
                backNode.preBouns = preBouns;
                backNode.aftBouns = aftBouns;
                backNode.length = datas.length;
                cb(err, socketCons.toSelf, 'queryTicketsAmount', backNode);
            /*collection.count(queryExpression, {}, function (err, count) {
                var backNode = {};
                backNode.count = count;
                backNode.curPage = bodyNode.curPage;
                backNode.limit = bodyNode.limit;
                backNode.datas = datas;
                cb(err, socketCons.toSelf, 'queryTicketsAmount', backNode);
            });*/
        });
    });
};


//对账查询
SocketControl.prototype.queryNodePlatDatas = function (bodyNode, cb) {
    var bodyStr = JSON.stringify(bodyNode);
    log.info("bodyStr===="+bodyStr);
    nodePlatAssist.queryNodePlatDatas(bodyNode,function(err,backMsgNode){
        if(err){
          log.info("********对账数据查询异常*********");
        }else{
            cb(null, socketCons.toSelf, 'queryNodePlatDatas', backMsgNode);
        }
    });
};
module.exports = SocketControl;
