/**
 * Created by Administrator on 2015/1/23.
 */

var source = require('print_source');
var nodePlatSource = source.nodePlatSource;

var util = require('print_util');
var mongoDBUtil = util.mongoDBUtil;
var log = util.log;

var memory = require('print_memory');
var terminalArray = memory.terminalArray;

var printControl = require('./PrintControl');

var cons = require('print_constants');
var socketCons = cons.socketCons;
var terminalCons = cons.terminalCons;

var assist = require('print_assist');
var queryAssist = assist.queryAssist;
var terminalAssist = assist.terminalAssist;

var SocketControl = function () {
};

SocketControl.prototype.handle = function (cmd, bodyNode, cb) {
    var self = this;
    if (typeof self[cmd] === 'function') {
        self[cmd](bodyNode, cb);
    } else {
        log.error('找不到处理此命令的方法: ' + cmd);
        cb();
    }
};

//登录
SocketControl.prototype.login = function (bodyNode, cb) {
    var self = this;
    var userName = bodyNode.userName;
    self.userName = userName;
    log.error(userName + '已登录');
    cb(null, socketCons.toSelf, 'login', 'ok');
};

//更改取票任务状态
SocketControl.prototype.catchTicketsStatus = function (bodyNode, cb) {
    var status = nodePlatSource.catchWaitQueenTaskStatus;
    if (status) {
        nodePlatSource.catchWaitQueenTask.stop();
        nodePlatSource.catchWaitQueenTaskStatus = false;
    } else {
        nodePlatSource.catchWaitQueenTask.start();
        nodePlatSource.catchWaitQueenTaskStatus = true;
    }
    ;
    cb(null, socketCons.toAll, 'catchTicketsStatus', nodePlatSource.catchWaitQueenTaskStatus);
};

//查询取票任务状态
SocketControl.prototype.queryCatchTicketsStatus = function (bodyNode, cb) {
    cb(null, socketCons.toSelf, 'queryCatchTicketsStatus', nodePlatSource.catchWaitQueenTaskStatus);
};


//查询用户列表
SocketControl.prototype.userList = function (bodyNode, cb) {
    mongoDBUtil.db.collection('customer', {safe: true}, function (err, collection) {
        collection.find().toArray(function (err, datas) {
            cb(err, socketCons.toSelf, 'userList', datas);
        })
    });
};

//添加用户
SocketControl.prototype.addUser = function (bodyNode, cb) {
    mongoDBUtil.db.collection('customer', {safe: true}, function (err, collection) {
        collection.find({'userName': bodyNode.userName}).toArray(function (err, datas) {
            if (datas.length == 0) {
                collection.insert(bodyNode, function () {
                    collection.find().toArray(function (err, datas) {
                        cb(err, socketCons.toAll, 'userList', datas);
                    });
                });
            } else {
                collection.findAndModify({'userName': bodyNode.userName}, {'id': -1}, {$set: bodyNode}, {new: true}, function (err, result) {
                    collection.find().toArray(function (err, datas) {
                        cb(err, socketCons.toAll, 'userList', datas);
                    });
                });
            }
            ;
        });
    });
};

//查询终端机列表
SocketControl.prototype.terminalList = function (bodyNode, cb) {
    mongoDBUtil.db.collection('terminal', {safe: true}, function (err, collection) {
        collection.find().toArray(function (err, datas) {
            for (var i = 0; i < datas.length; i++) {
                if (terminalArray.length == 0) {
                    datas[i].status = terminalCons.terminal.status.notAvailable;
                } else {
                    var have = false;
                    for (var n = 0; n < terminalArray.length; n++) {
                        if (datas[i].id == terminalArray[n].terminalId) {
                            datas[i].status=terminalArray[n].status;
                            have = true;
                        }
                    }
                    ;
                    if (!have) {
                        datas[i].status = terminalCons.terminal.status.notAvailable;
                    }
                }
            }
            cb(err, socketCons.toSelf, 'terminalList', datas);
        })
    });
};

//请求获取等待队列
SocketControl.prototype.waitQueen = function (bodyNode, cb) {
    queryAssist.getWaitQueen(function (err, datas) {
        if (!err) {
            var waitQueen = datas;
            cb(err, socketCons.toSelf, 'waitQueen', waitQueen);
        }
    });
};

//查询成功票队列

SocketControl.prototype.querySuccessTickets = function (bodyNode, cb) {
    mongoDBUtil.db.collection('TerminalPrintSuccess', {safe: true}, function (err, collection) {
        var skip = (bodyNode.curPage - 1) * bodyNode.limit;
        collection.find(bodyNode.cond).sort({"id": -1}).skip(skip).limit(bodyNode.limit).toArray(function (err, datas) {
            collection.count(bodyNode.cond, {}, function (err, count) {
                var backNode = {};
                backNode.count = count;
                backNode.curPage = bodyNode.curPage;
                backNode.limit = bodyNode.limit;
                backNode.datas = datas;
                cb(err, socketCons.toSelf, 'querySuccessTickets', backNode);
            });

        })
    });

};


//查询等待兑奖票队列
SocketControl.prototype.queryWaitBonusTickets = function (bodyNode, cb) {
    mongoDBUtil.db.collection('TicketsWaitBonus', {safe: true}, function (err, collection) {
        var skip = (bodyNode.curPage - 1) * bodyNode.limit;
        collection.find(bodyNode.cond).sort({"id": -1}).skip(skip).limit(bodyNode.limit).toArray(function (err, datas) {
            collection.count(bodyNode.cond, {}, function (err, count) {
                var backNode = {};
                backNode.count = count;
                backNode.curPage = bodyNode.curPage;
                backNode.limit = bodyNode.limit;
                backNode.datas = datas;
                cb(err, socketCons.toSelf, 'queryWaitBonusTickets', backNode);
            });
        })
    });
};


//查询历史票队列
SocketControl.prototype.queryHistoryTickets = function (bodyNode, cb) {
    mongoDBUtil.db.collection('HadBonusTickets', {safe: true}, function (err, collection) {
        var skip = (bodyNode.curPage - 1) * bodyNode.limit;
        collection.find(bodyNode.cond).sort({"id": -1}).skip(skip).limit(bodyNode.limit).toArray(function (err, datas) {
            collection.count(bodyNode.cond, {}, function (err, count) {
                var backNode = {};
                backNode.count = count;
                backNode.curPage = bodyNode.curPage;
                backNode.limit = bodyNode.limit;
                backNode.datas = datas;
                cb(err, socketCons.toSelf, 'queryHistoryTickets', backNode);
            });

        })
    });
};


//查询错误票队列
SocketControl.prototype.queryFailTickets = function (bodyNode, cb) {
    mongoDBUtil.db.collection('failTicket', {safe: true}, function (err, collection) {
        var skip = (bodyNode.curPage - 1) * bodyNode.limit;
        collection.find(bodyNode.cond).sort({"id": -1}).skip(skip).limit(bodyNode.limit).toArray(function (err, datas) {
            collection.count(bodyNode.cond, {}, function (err, count) {
                var backNode = {};
                backNode.count = count;
                backNode.curPage = bodyNode.curPage;
                backNode.limit = bodyNode.limit;
                backNode.datas = datas;
                cb(err, socketCons.toSelf, 'queryFailTickets', backNode);
            });
        })
    });
};


//查询错误票队列
SocketControl.prototype.rePrint = function (bodyNode, cb) {
    mongoDBUtil.db.collection('failTicket', {safe: true}, function (err, collection) {
        mongoDBUtil.db.collection('waitTerminalTicket', {safe: true}, function (err, waitTerminalTicket) {
            collection.findAndRemove({id: bodyNode.id}, [], function (err, ticket) {
                waitTerminalTicket.insert(ticket, function () {
                    log.info(ticket.id + '已重新出票');
                })
            })
        });
    });
};


//添加终端机
SocketControl.prototype.addTerminal = function (bodyNode, cb) {
    mongoDBUtil.db.collection('terminal', {safe: true}, function (err, collection) {
        collection.find({'id': bodyNode.id}).toArray(function (err, datas) {
            if (datas.length == 0) {
                bodyNode.status = 1900;
                collection.insert(bodyNode, function () {
                    cb(err, socketCons.toAll, 'addTerminal', bodyNode);
                });
            } else {
                if (bodyNode.status && bodyNode.status != "0000") {
                    printControl.changeTerminalStatus(bodyNode);
                } else {
                    bodyNode.preAmount = parseFloat(bodyNode.preAmount);
                    collection.findAndModify({'id': bodyNode.id}, {'id': -1}, {$set: bodyNode}, {new: true}, function (err, result) {
                        for (var j = 0; j < terminalArray.length; j++) {
                            if (terminalArray[j].terminal.id == bodyNode.id) {
                                terminalArray[j].gameCode = bodyNode.gameCode;
                                break;
                            }
                        }
                        cb(err, socketCons.toAll, 'editTerminal', result);
                    });
                }
            }
            ;
        });
    });
};

SocketControl.prototype.printTicket = function (bodyNode, cb) {
    log.info(bodyNode);
    var terminal;

    for (var j = 0; j < terminalArray.length; j++) {
        if (terminalArray[j].status == terminalCons.terminal.status.print) {
            terminal = terminalArray[j];
            break;
        }
    }
    var result = 0;
    if (!terminal) {
        cb(null, socketCons.toSelf, 'printTicket', result);
    } else {
        terminalAssist.printTicket(terminal.terminalId, bodyNode.id, function (err) {
            if (err) {
                result = 0;
            } else {
                result = 1;
            }
            cb(null, socketCons.toSelf, 'printTicket', result);
        });
    }
    ;
};

SocketControl.prototype.printHistoryTicketData = function (bodyNode, cb) {
    log.info(bodyNode);
    var terminal;

    for (var j = 0; j < terminalArray.length; j++) {
        if (terminalArray[j].status == terminalCons.terminal.status.print) {
            terminal = terminalArray[j];
            break;
        }
    }
    var result = 0;
    if (!terminal) {
        cb(null, socketCons.toSelf, 'printHistoryTicketData', result);
    } else {
        terminalAssist.printHistoryTicket(terminal.terminalId, bodyNode.id, function (err) {
            if (err) {
                result = 0;
            } else {
                result = 1;
            }
            cb(null, socketCons.toSelf, 'printHistoryTicketData', result);
        });
    }
    ;
};


SocketControl.prototype.printBonusTicket = function (bodyNode, cb) {
    log.info(bodyNode);
    var terminal;

    for (var j = 0; j < terminalArray.length; j++) {
        if (terminalArray[j].status == terminalCons.terminal.status.print) {
            terminal = terminalArray[j];
            break;
        }
    }
    var result = 0;
    if (!terminal) {
        cb(null, socketCons.toSelf, 'printBonusTicket', result);
    } else {
        terminalAssist.printBonusTicket(terminal.terminalId, bodyNode.id, function (err) {
            if (err) {
                result = 0;
            } else {
                result = 1;
            }
            cb(null, socketCons.toSelf, 'printBonusTicket', result);
        });
    }
    ;
};



SocketControl.prototype.reBonus = function (bodyNode, cb) {
    log.info(bodyNode);
    mongoDBUtil.db.collection('TicketsWaitBonus', {safe: true}, function (err, collection) {
        collection.findAndModify({id: bodyNode.id}, {'id': -1}, {$set: {status: terminalCons.ticket.status.in}}, {new: true}, function (err, result) {
            if(!err){
                log.info(bodyNode + '： 已经重出');
            }
        });
    });
};



module.exports = SocketControl;
