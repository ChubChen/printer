/**
 * Created by w44 on 15-1-8.
 */

var async = require('async');

var util = require('print_util');
var mongoDBUtil = util.mongoDBUtil;
var log = util.log;
var checkNumberUtil = util.checkNumberUtil;

var assist = require('print_assist');
var nodePlatAssist = assist.nodePlatAssist;

var cons = require('print_constants');
var terminalCons = cons.terminalCons;
var msgParam = cons.msgParam;
var nodePlatCons = cons.nodePlatCons;

var memory = require('print_memory');
var terminalArray = memory.terminalArray;
var webIo = memory.webIo;

var bean = require('print_bean');
var ticketTask = bean.ticketTask;


var TerminalControl = function (socket, io) {
    var self = this;
    self.socket = socket;
    self.io = io;
};


TerminalControl.prototype.handle = function (headNode, bodyNode) {
    var self = this;
    log.info(JSON.stringify(headNode));
    log.info(JSON.stringify(bodyNode));
    var method = 'handle' + headNode.cmd;
    //特殊处理
    if (headNode.cmd == '0031' || headNode.cmd == '0051') {
        method = 'handle' + '0003';
    }
    //添加判断方法逻辑，处理无此方法时的清空
    if (typeof self[method] === 'function') {
        self[method](headNode, bodyNode);
    } else {
        log.info('找不到处理此命令的方法: ' + method);
    }
};


/**
 * send response msg to terminal
 */
TerminalControl.prototype.sendRepMsg = function (backHeadNode) {
    var self = this;
    var content = backHeadNode.cmd + backHeadNode.sequenceId + backHeadNode.terminalId + backHeadNode.retCode + backHeadNode.retDesc;
    var contentBuf = new Buffer(content);
    var buf = new Buffer(contentBuf.length + 4);
    buf.writeInt32BE(contentBuf.length, 0);
    contentBuf.copy(buf, 4, 0, contentBuf.length);
    self.sendBuf(buf);
};

/**
 * send response 0003 to terminal
 */

TerminalControl.prototype.sendRepMsg0003 = function (backHeadNode) {
    var self = this;
    var content = backHeadNode.cmd + backHeadNode.sequenceId + backHeadNode.terminalId + backHeadNode.retCode + backHeadNode.retDesc + backHeadNode.ticketid;
    var contentBuf = new Buffer(content);
    var buf = new Buffer(contentBuf.length + 4);
    buf.writeInt32BE(contentBuf.length, 0);
    contentBuf.copy(buf, 4, 0, contentBuf.length);
    self.sendBuf(buf);
    log.info('---发送0003---');
    log.info(backHeadNode);
};


/**
 * send buffer to terminal
 */
TerminalControl.prototype.sendBuf = function (buf) {
    var self = this;
    self.socket.write(buf);
};


/**
 *
 * @param headNode
 * @param bodyNode
 *
 * 2.1.7.1    终端机登记后请求数据消息(命令码:0001)
 * 请求消息: [终端机->服务器]
 *
 * 表示该机器处于可用状态,应发送出票请求
 * 得到该机器的ID号,修改状态为可用状态
 *
 */
TerminalControl.prototype.handle0001 = function (headNode, bodyNode) {
    var self = this;
    var backHeadNode = {
        cmd: headNode.cmd,
        sequenceId: headNode.sequenceId,
        retCode: terminalCons.retCode.success.code,
        retDesc: terminalCons.retCode.success.desc,
        terminalId: headNode.terminalId
    };
    var have = true;
    var reset= true;
    for (var i = 0; i < terminalArray.length; i++) {
        var terminalId = terminalArray[i].terminalId;
        if (terminalId == headNode.terminalId) {
            //todo 如果该终端机处于查询状态,也会发送0001,但是此时不应该做任何操作,但是需要更新数据库中终端机的状态
            if (terminalArray[i].status == terminalCons.terminal.status.search) {
                mongoDBUtil.db.collection('terminal', {
                    safe: true
                }, function (err, collection) {
                    collection.findAndModify({
                        'id': headNode.terminalId
                    }, {}, {
                        $set: {
                            status: terminalCons.terminal.status.search,
                            address: self.socket.remoteAddress,
                            port: self.socket.remotePort
                        }
                    }, {
                        new: true
                    }, function (err, result) {
                        if (err) {
                            log.info(err);
                        } else {
                            log.info(result);
                            var msg = JSON.stringify(result);
                            self.io.emit('statusChange', msg);
                            var _backHeadNode = {
                                cmd: '0001',
                                sequenceId: headNode.sequenceId,
                                retCode: terminalCons.retCode.success.code,
                                retDesc: terminalCons.retCode.success.desc,
                                terminalId: headNode.terminalId
                            };
                            self.sendRepMsg(_backHeadNode);
                        }
                    })
                });
                return;
            };
            if(terminalArray[i].status != terminalCons.terminal.status.kill){
                terminalArray[i].status = terminalCons.terminal.status.available;
                terminalArray[i].terminal.status = terminalCons.terminal.status.available;

            };
            //数组中有该终端
            have = false;
            if(self.socket.remotePort != terminalArray[i].terminalControl.socket.remotePort){
                log.error('新端口接入处理：'+self.socket.remotePort);
                log.error('原端口：'+terminalArray[i].terminalControl.socket.remotePort);
                terminalArray.splice(i, 1);
                reset = false;
            }
        }
    }
    mongoDBUtil.db.collection('terminal', {
        safe: true
    }, function (err, collection) {
        collection.findOne({'id': headNode.terminalId},function(err, terminal){
            if(terminal){
                if(terminal.status == terminalCons.terminal.status.kill) //继续回复0001
                {
                    if (have) {
                        var terminal = new ticketTask(terminal, self);
                        terminalArray.push(terminal);
                        //向终端级查询额度
                        var backNode = {
                            cmd: '0008',
                            sequenceId: headNode.sequenceId,
                            terminalId: headNode.terminalId
                        }
                        self.send0008(backNode);
                    };
                    if(!reset){
                        var terminal = new ticketTask(terminal, self);
                        terminalArray.push(terminal);
                        //向终端级查询额度
                        var backNode = {
                            cmd: '0008',
                            sequenceId: headNode.sequenceId,
                            terminalId: headNode.terminalId
                        }
                        self.send0008(backNode);
                        log.info('handle0001: ' + '已重新制定指定终端机' + terminal.id + '为出票');

                    };
                    self.sendRepMsg(backHeadNode);
                }else{//修改为出票
                    collection.findAndModify({
                        'id': headNode.terminalId
                    }, {}, {
                        $set: {
                            status: terminalCons.terminal.status.available,
                            address: self.socket.remoteAddress,
                            port: self.socket.remotePort
                        }
                    }, {
                        new: true
                    }, function (err, result) {
                        if (err) {
                            log.error('handle0001: ' + err);
                        } else {
                            if(result){
                                if (have) {
                                    var terminal = new ticketTask(result, self);
                                    terminalArray.push(terminal);
                                    log.info('handle0001: ' + '已指定终端机' + result.id + '为出票');
                                    //向终端级查询额度
                                    var backNode = {
                                        cmd: '0008',
                                        sequenceId: headNode.sequenceId,
                                        terminalId: headNode.terminalId
                                    }
                                    self.send0008(backNode);
                                };
                                if(!reset){
                                    var terminal = new ticketTask(result, self);
                                    terminalArray.push(terminal);
                                    //向终端级查询额度
                                    var backNode = {
                                        cmd: '0008',
                                        sequenceId: headNode.sequenceId,
                                        terminalId: headNode.terminalId
                                    }
                                    self.send0008(backNode);
                                    log.info('handle0001: ' + '已重新制定指定终端机' + result.id + '为出票');

                                };
                                var msg = JSON.stringify(result);
                                //通知页面修改
                                self.io.emit('statusChange', msg);
                            }
                        }
                    })
                }
                self.sendRepMsg(backHeadNode);
            }else{
                log.error("没找到终端级" + terminalId)
                self.sendRepMsg(backHeadNode);
            }
        });
    });
};

//发送出票请求后的响应消息
TerminalControl.prototype.handle0002 = function (headNode, bodyNode) {
    log.info('----handle0002----');
    log.info(headNode);
    log.info(bodyNode);
};

TerminalControl.prototype.handle0022 = function (headNode, bodyNode) {
    log.info('----handle0002----');
    log.info(headNode);
    log.info(bodyNode);
};


//发送出票请求后收到的票面信息(如果成功)
TerminalControl.prototype.handle0003 = function (headNode, bodyNode) {
    var self = this;
    if (bodyNode == null) {
        log.error(headNode.cmd + '传来数据有误');
        return;
    } else if (bodyNode.data1 == '') {
        log.error(headNode.cmd + '传来数据有误');
        return;
    } else {
        log.info('---' + headNode.cmd + '---');
        var backHeadNode = {
            cmd: '0003',
            sequenceId: headNode.sequenceId,
            terminalId: headNode.terminalId
        };
        //入终端机成功库
        async.waterfall([
            function (cb) {
                //先获得终端机以及终端机对应的socket.
                var terminal;
                for (var i = 0; i < terminalArray.length; i++) {
                    if (headNode.terminalId == terminalArray[i].terminalId) {
                        terminal = terminalArray[i].terminal;
                    }
                }
                cb(null, terminal);
            },
            function (terminal, cb) {
                try {
                    if (terminal.terminalName == undefined) {
                        log.error('0003传来数据有误');
                        return;
                    }
                } catch (err) {
                    log.error('0003传来数据有误,查询来获得票');
                    return;
                }

                mongoDBUtil.db.collection('waitTerminal' + terminal.terminalName, {
                    safe: true
                }, function (err, collection) {
                    var ticketId = bodyNode.namedata1.split(/\W/g)[0];
                    var terminalId = headNode.terminalId;
                    if (bodyNode.data1 == '') {
                        log.info(ticketId + '..........返回数据有误!');
                        return;
                    }
                    log.error('出票成功，从等待中取票并删除：' + ticketId);
                    collection.findAndRemove({
                        'id': ticketId
                    }, [], function (err, result) {
                        log.error(result);
                        if (!result) {
                            log.info('票已被取走' + ticketId);
                        } else {
                            delete result['_id'];
                            result.terminalId = terminalId;
                            var arr = bodyNode.data1.split(/\n/);
                            if (result.gameCode == 'T51') {
                                //竞彩票面信息与其他彩种不同,需要专门处理
                                result.chuan = arr[3].replace(/\D/g, '');
                                var tar = arr[5].replace(/\s+/g, "|");
                                arr = tar.split('|');
                                result.ticketSeq = arr[0];
                                result.ticketPwd = arr[1];
                                result.ticketPwd2 = arr[2];
                            } else if (result.gameCode == 'T52') {
                                //竞彩票面信息与其他彩种不同,需要专门处理
                                result.chuan = arr[3].replace(/\D/g, '');
                                var tar = arr[5].replace(/\s+/g, "|");
                                arr = tar.split('|');
                                result.ticketSeq = arr[0];
                                result.ticketPwd = arr[1];
                                result.ticketPwd2 = arr[2];
                            } else {
                                var tar = arr[1].replace(/\s+/g, "|");
                                arr = tar.split('|');
                                result.ticketSeq = arr[0];
                                result.ticketPwd = arr[1];
                                result.ticketPwd2 = arr[2];
                            }
                            result.terminalReturnTime = new Date().getTime();
                            result.metaTicket = bodyNode.data1;
                            result.metaTicketName = bodyNode.namedata1;
                            result.metaTicket2 = bodyNode.data2;
                            result.metaTicket2Name = bodyNode.namedata2;
                            result.status = terminalCons.ticket.status.in;
                            result.platStatus = '';


                            //判断是否打印出的为样票
                            if (result.metaTicket.indexOf('样票') != -1) {
                                //打印出了一张样票,入错误库
                                mongoDBUtil.db.collection('wrongTicket', {safe: true}, function (err, coll) {
                                    coll.insert(result, function () {
                                        var msg = {
                                            id: result.id,
                                            msg: '打印出了一张样票!请至错误库查看这张票!'
                                        };
                                        self.io.emit('wrongTicket', msg);
                                    })
                                });
                                return;
                            }
                            ;
                            try {
                                var flag = checkNumberUtil.checkMut(result, bodyNode.data1);
                                if (flag) {
//                                    collection.count({}, {}, function (err, count) {
//                                        log.error(count);
//                                        if(count<1){
//                                            for (var i = 0; i < terminalArray.length; i++) {
//                                                if (headNode.terminalId == terminalArray[i].terminalId) {
//                                                    terminalArray[i].status = terminalCons.terminal.status.available;
//                                                    terminalArray[i].terminal.status = terminalCons.terminal.status.available;
//                                                    var msg = JSON.stringify(terminalArray[i].terminal);
//                                                    self.io.emit('statusChange', msg);
//                                                }
//                                            }
//                                        }
//                                    });

                                    mongoDBUtil.db.collection('TerminalPrintSuccess', {safe: true}, function (err, collection) {
                                        collection.insert(result, function (err, data) {
                                            mongoDBUtil.db.collection('terminal', {safe: true}, function (err, collection) {
                                                //修改金额
                                                collection.findAndModify({'id': headNode.terminalId}, {}, {
                                                    $inc: {
                                                        amount : - parseInt(result.amount,10)/100,
                                                        everyCurrAmount : parseInt(result.amount,10)/100
                                                    }
                                                }, {
                                                    new: true
                                                }, function (err, result) {
                                                    var msg = JSON.stringify(result);
                                                    self.io.emit('statusChange', msg);
                                                    log.error('已指定终端机' + result.id + '为兑奖');
                                                    cb(null);
                                                })
                                            });
                                        })
                                    });
                                    //校验通过
                                    //todo 给平台发送出票成功请求
                                    nodePlatAssist.sentP02(result, function (err, backMsgNode) {
                                        //todo  处理平台返回
                                        if (!err) {
                                            var _body = JSON.parse(backMsgNode.body);
                                            mongoDBUtil.db.collection('TerminalPrintSuccess', {safe: true}, function (err, collection) {
                                                collection.update({id: result.id}, {
                                                    $set: {platStatus: _body.repCode}
                                                }, {}, function (err, res) {
                                                    log.info(result.id + '平台状态 : ' + _body.repCode);
                                                })
                                            });
                                        } else {
                                            nodePlatAssist.sentP02(result, function (err, backMsgNode) {
                                                if (!err) {
                                                    var _body = JSON.parse(backMsgNode.body);
                                                    mongoDBUtil.db.collection('TerminalPrintSuccess', {safe: true}, function (err, collection) {
                                                        collection.update({id: result.id}, {
                                                            $set: {platStatus: _body.repCode}
                                                        }, {}, function (err, res) {
                                                            log.info(result.id + '平台状态 : ' + _body.repCode);
                                                        })
                                                    });
                                                }
                                            })
                                        }
                                        ;
                                    });
                                    if (headNode.cmd == '0051') {
                                        log.info('---发送0053---');
                                        var backHeadNode0005 = {
                                            cmd: '0053',
                                            sequenceId: headNode.sequenceId,
                                            terminalid: terminalId,
                                            retCode: nodePlatCons.retCode.success.code,
                                            retDesc: nodePlatCons.retCode.success.desc
                                        };
                                        var backBodyNode0005 = {
                                            ticketid: result.id
                                        };
                                        self.send0053(backHeadNode0005, backBodyNode0005);
                                    } else if (headNode.cmd == '0031') {
                                        backHeadNode.retCode = nodePlatCons.retCode.success.code;
                                        backHeadNode.retDesc = nodePlatCons.retCode.success.desc;
                                        backHeadNode.ticketid = ticketId;
                                        self.sendRepMsg0003(backHeadNode);
                                    }
                                } else {

//                                    collection.count({}, {}, function (err, count) {
//                                        log.error(count);
//                                        if(count<1){
//                                            for (var i = 0; i < terminalArray.length; i++) {
//                                                if (headNode.terminalId == terminalArray[i].terminalId) {
//                                                    terminalArray[i].status = terminalCons.terminal.status.available;
//                                                    terminalArray[i].terminal.status = terminalCons.terminal.status.available;
//                                                    var msg = JSON.stringify(terminalArray[i].terminal);
//                                                    self.io.emit('statusChange', msg);
//                                                }
//                                            }
//                                        }
//                                    });

                                    nodePlatAssist.sentFailed(result, function (err, backMsgNode) {
                                        //todo  处理平台返回
                                        if (!err) {
                                            var _body = JSON.parse(backMsgNode.body);
                                            mongoDBUtil.db.collection('failTikcet', {safe: true}, function (err, colllection) {
                                                if (!err) {
                                                    colllection.insert(result, function () {
                                                        log.error(result.id + '已入失败库');
                                                        log.info(result.id + '平台状态 : ' + _body.repCode);
                                                    })
                                                }
                                            });
                                        }
                                    });
                                }
                                ;
                            } catch (err) {
                                log.error('校验过程中出错!');
                                log.error(err);
                            }
                        }
                    });
                });
                cb(null);
            }
        ], function (err, result) {
            if (err) {
                log.error('err: ', err); // -> null
            }
        })
    }
};


TerminalControl.prototype.handle0039 = function (headNode, bodyNode) {
    var self = this;
    if (bodyNode == null) {
        log.error(headNode.cmd + '传来数据有误');
        return;
    } else if (bodyNode.data1 == '') {
        log.error(headNode.cmd + '传来数据有误');
        return;
    } else {
        log.info('---' + headNode.cmd + '---');
        var backHeadNode = {
            cmd: '0003',
            sequenceId: headNode.sequenceId,
            terminalId: headNode.terminalId
        };
        //入终端机成功库
        async.waterfall([
            function (cb) {
                //先获得终端机以及终端机对应的socket.
                var terminal;
                for (var i = 0; i < terminalArray.length; i++) {
                    if (headNode.terminalId == terminalArray[i].terminalId) {
                        terminal = terminalArray[i].terminal;
                    }
                }
                cb(null, terminal);
            },
            function (terminal, cb) {
                try {
                    if (terminal.terminalName == undefined) {
                        log.error('0039传来数据有误');
                        return;
                    }
                } catch (err) {
                    log.error('0039,彩票机控制项丢失');
                    return;
                }
                mongoDBUtil.db.collection('waitTerminal' + terminal.terminalName, {
                    safe: true
                }, function (err, collection) {
                    var ticketId = bodyNode.namedata1.split(/\W/g)[0];
                    var terminalId = headNode.terminalId;
                    if (bodyNode.data1 == '') {
                        log.info(ticketId + '..........返回数据有误!');
                        return;
                    }
                    log.error('出票成功，从等待中取票并删除：' + ticketId);
                    collection.findAndRemove({
                        'id': ticketId
                    }, [], function (err, result) {
                        log.error(result);
                        if (!result) {
                            log.info('0039票已被处理' + ticketId);
                            //允许终端机删除
                            backHeadNode.retCode = nodePlatCons.retCode.success.code;
                            backHeadNode.retDesc = nodePlatCons.retCode.success.desc;
                            backHeadNode.ticketid = ticketId;
                            self.sendRepMsg0003(backHeadNode);
                        } else {
                            delete result['_id'];
                            result.terminalId = terminalId;
                            var arr = bodyNode.data1.split(/\n/);
                            if (result.gameCode == 'T51') {
                                //竞彩票面信息与其他彩种不同,需要专门处理
                                result.chuan = arr[3].replace(/\D/g, '');
                                var tar = arr[5].replace(/\s+/g, "|");
                                arr = tar.split('|');
                                result.ticketSeq = arr[0];
                                result.ticketPwd = arr[1];
                                result.ticketPwd2 = arr[2];
                            } else if (result.gameCode == 'T52') {
                                //竞彩票面信息与其他彩种不同,需要专门处理
                                result.chuan = arr[3].replace(/\D/g, '');
                                var tar = arr[5].replace(/\s+/g, "|");
                                arr = tar.split('|');
                                result.ticketSeq = arr[0];
                                result.ticketPwd = arr[1];
                                result.ticketPwd2 = arr[2];
                            } else {
                                var tar = arr[1].replace(/\s+/g, "|");
                                arr = tar.split('|');
                                result.ticketSeq = arr[0];
                                result.ticketPwd = arr[1];
                                result.ticketPwd2 = arr[2];
                            }
                            result.terminalReturnTime = new Date().getTime();
                            result.metaTicket = bodyNode.data1;
                            result.metaTicketName = bodyNode.namedata1;
                            result.metaTicket2 = bodyNode.data2;
                            result.metaTicket2Name = bodyNode.namedata2;
                            result.status = terminalCons.ticket.status.in;
                            result.platStatus = '';
                            //判断是否打印出的为样票
                            if (result.metaTicket.indexOf('样票') != -1) {
                                //打印出了一张样票,入错误库
                                mongoDBUtil.db.collection('wrongTicket', {safe: true}, function (err, coll) {
                                    coll.insert(result, function () {
                                        var msg = {
                                            id: result.id,
                                            msg: '打印出了一张样票!请至错误库查看这张票!'
                                        };
                                        self.io.emit('wrongTicket', msg);
                                    })
                                });
                                return;
                            }
                            ;
                            try {
                                var flag = checkNumberUtil.checkMut(result, bodyNode.data1);
                                if (flag) {
                                    mongoDBUtil.db.collection('TerminalPrintSuccess', {safe: true}, function (err, collection) {
                                        collection.insert(result, function (err, result) {
                                            mongoDBUtil.db.collection('terminal', {safe: true}, function (err, collection) {
                                                //修改金额
                                                collection.findAndModify({'id': headNode.terminalId}, {}, {
                                                    $inc: {
                                                        amount : - parseInt(result.amount,10)/100,
                                                        everyCurrAmount : parseInt(result.amount,10)/100
                                                    }
                                                }, {
                                                    new: true
                                                }, function (err, result) {
                                                    var msg = JSON.stringify(result);
                                                    self.io.emit('statusChange', msg);
                                                    log.error('已指定终端机' + result.id + '为兑奖');
                                                    if (have) {
                                                        var terminal = new ticketTask(result, self);
                                                        terminalArray.push(terminal);
                                                    }
                                                    cb(null);
                                                })
                                            });
                                        })
                                    });
                                    //校验通过
                                    //todo 给平台发送出票成功请求
                                    nodePlatAssist.sentP02(result, function (err, backMsgNode) {
                                        //todo  处理平台返回
                                        if (!err) {
                                            var _body = JSON.parse(backMsgNode.body);
                                            mongoDBUtil.db.collection('TerminalPrintSuccess', {safe: true}, function (err, collection) {
                                                collection.update({id: result.id}, {
                                                    $set: {platStatus: _body.repCode}
                                                }, {}, function (err, res) {
                                                    log.info(result.id + '平台状态 : ' + _body.repCode);
                                                })
                                            });
                                        } else {
                                            nodePlatAssist.sentP02(result, function (err, backMsgNode) {
                                                if (!err) {
                                                    var _body = JSON.parse(backMsgNode.body);
                                                    mongoDBUtil.db.collection('TerminalPrintSuccess', {safe: true}, function (err, collection) {
                                                        collection.update({id: result.id}, {
                                                            $set: {platStatus: _body.repCode}
                                                        }, {}, function (err, res) {
                                                            log.info(result.id + '平台状态 : ' + _body.repCode);
                                                        })
                                                    });
                                                }
                                            })
                                        }
                                        ;
                                    });
                                    if (headNode.cmd == '0039') {
                                        backHeadNode.retCode = nodePlatCons.retCode.success.code;
                                        backHeadNode.retDesc = nodePlatCons.retCode.success.desc;
                                        backHeadNode.ticketid = ticketId;
                                        self.sendRepMsg0003(backHeadNode);
                                    }
                                } else {
                                    nodePlatAssist.sentFailed(result, function (err, backMsgNode) {
                                        //todo  处理平台返回
                                        if (!err) {
                                            var _body = JSON.parse(backMsgNode.body);
                                            mongoDBUtil.db.collection('failTikcet', {safe: true}, function (err, colllection) {
                                                if (!err) {
                                                    colllection.insert(result, function () {
                                                        log.error(result.id + '已入失败库');
                                                        log.info(result.id + '平台状态 : ' + _body.repCode);
                                                    })
                                                }
                                            });
                                        }
                                    });
                                }
                                ;
                            } catch (err) {
                                log.error('校验过程中出错!');
                                log.error(err);
                            }
                        }
                    });
                });
                cb(null);
            }
        ], function (err, result) {
            if (err) {
                log.error('err: ', err); // -> null
            }
        })
    }
};



TerminalControl.prototype.handle0004 = function (headNode, bodyNode) {
    log.info('---handle0004---');
    var ticketId = bodyNode.ticketId;
    log.info(ticketId + '已经打印');
};


TerminalControl.prototype.handle0051 = function (headNode, bodyNode) {
    log.info('---handle0051---');
    if (bodyNode == null) {
        log.error('---handle0051BodyNode格式有误---');
        return;
    }
    var self = this;
    self.handle0003(headNode, bodyNode);
    //发送回执
    var body = {
        ticketid: bodyNode.namedata1.split(/\W/g)[0]
    };
    var backHeadNode = {
        cmd: '0053',
        sequenceId: headNode.sequenceId,
        terminalId: headNode.terminalId,
        retCode: terminalCons.retCode.success.code,
        retDesc: terminalCons.retCode.success.desc
    };
    self.send0053(backHeadNode, body);
};

TerminalControl.prototype.handle0052 = function (headNode, bodyNode) {
    log.info('---handle0052---');
    log.info(bodyNode);
};

//TerminalControl.prototype.handle0061 = function (headNode, bodyNode) {
//    log.info('---handle0061---');
//    log.info(bodyNode.playId);
//    //获得游戏代码
//    var gameCode = gameCodeTrans.gameCodeTrans4Search[bodyNode.playId];
//    var _date = moment().format('YYMMDD');
//    //根据游戏名做具体处理
//    _date = _date.substring(0, _date.length - 1);
//    var bonusInfo = bodyNode.data.split('\r\n');
//    bonusInfo.splice(0, 5);
//    var maxTerm = {
//        termCode: 0,
//        number: ''
//    };
//    async.each(bonusInfo, function (item, cb) {
//        if (gameCode == 'T05') {
//            var inf = item.split(' ');
//        } else if (gameCode == 'T06') {
//            var inf = item.replace(/\s+/g, ' ').split(' ');
//        }
//
//        if (inf[1]) {
//            var firstNum = {};
//            firstNum.termCode = parseInt(_date + inf[0]);
//            firstNum.number = inf[1].replace(/\D/g, ',');
//            if (firstNum.termCode > maxTerm.termCode) {
//                maxTerm = firstNum;
//            }
//        }
//        if (inf[3]) {
//            var secondNum = {};
//            secondNum.termCode = parseInt(_date + inf[2]);
//            secondNum.number = inf[3].replace(/\D/g, ',');
//            if (secondNum.termCode > maxTerm.termCode) {
//                maxTerm = secondNum;
//            }
//        }
//        cb(null);
//    }, function (err) {
//        if (maxTerm.number == '') {
//            numberCtrl.query(gameCode)
//        } else {
//            numberCtrl.sendNumbers2plat(gameCode, maxTerm.termCode, maxTerm.number);
//            mongoDBUtil.db.collection('WinNumbers', {safe: true}, function (err, collection) {
//                maxTerm.gameCode = gameCode;
//                maxTerm.writeTime = new Date().getTime();
//                if (!err) {
//                    collection.insert(maxTerm, function () {
//                    })
//                }
//            });
//            numberCtrl.run(gameCode);
//        }
//    });
//};


TerminalControl.prototype.handle1000 = function (headNode, bodyNode) {
    var self = this;
    log.info('---handle1000---');
    log.info(headNode);
    log.info(bodyNode);
    var terminalId = headNode.terminalId;
    async.waterfall([
        function (cb) {
            var have = true;
            for (var i = 0; i < terminalArray.length; i++) {
                if (terminalId == terminalArray[i].terminalId) {
                    terminalArray[i].status = terminalCons.terminal.status.bonus;
                    terminalArray[i].terminal.status = terminalCons.terminal.status.bonus;
                    have = false;
                }
            }
            cb(null, terminalId, have);
        },
        function (terminalId, have, cb) {
            mongoDBUtil.db.collection('terminal', {
                safe: true
            }, function (err, collection) {
                collection.findAndModify({
                    'id': terminalId
                }, {
                    'id': -1
                }, {
                    $set: {
                        status: terminalCons.terminal.status.bonus
                    }
                }, {
                    new: true
                }, function (err, result) {
                    var msg = JSON.stringify(result);
                    self.io.emit('statusChange', msg);
                    log.error('已指定终端机' + result.id + '为兑奖');
                    if (have) {
                        var terminal = new ticketTask(result, self);
                        terminalArray.push(terminal);
                    }
                    cb(null);
                })
            })
        }
    ], function (err, result) {
        if (err) {
            log.info('err: ', err); // -> null
            log.info('result: ', result); // -> 16
        }
    });
    var backHeadNode = {
        cmd: headNode.cmd,
        sequenceId: headNode.sequenceId,
        retCode: terminalCons.retCode.success.code,
        retDesc: terminalCons.retCode.success.desc,
        terminalId: headNode.terminalId
    };
    self.sendRepMsg(backHeadNode);
};


TerminalControl.prototype.handle0071 = function (headNode, bodyNode) {
    var self = this;
    log.info('---handle0071---');
    log.info(bodyNode.data);
    var arr = bodyNode.data.split('$');
    log.info('数组长度' + arr.length);
    mongoDBUtil.db.collection('TicketsWaitBonus', {
        safe: true
    }, function (err, collection) {
        for (var i = 0; i < arr.length; i++) {
            var _bonusInfo = arr[i];
            log.info('_bonusInfo + .........' + _bonusInfo);
            if (_bonusInfo.indexOf('奖期不在可兑奖状态') >= 0) { //不在兑奖时间内
                var seq = _bonusInfo.substring(0, 20);
                collection.findAndModify({'ticketSeq': seq}, {'id': -1}, {$set: {status: terminalCons.ticket.status.in}}, {new: true}, function (err, result) {
                    log.info(seq + "返回兑奖状态为未兑奖,修改状态为等待兑奖");
                });
                continue;
            }
            if (_bonusInfo.length > 70) {
                var seq = _bonusInfo.substring(0, 20);
                log.info('seq + .........' + seq);
                self.insert2History(headNode.terminalId, _bonusInfo, seq);
            } else {
                var seq = _bonusInfo.substring(0, 20);
                if (seq.length == 20) {
                    collection.findAndModify({
                        'ticketSeq': seq
                    }, {
                        'id': -1
                    }, {
                        $set: {
                            status: terminalCons.ticket.status.wait,
                            bonusInfo: _bonusInfo
                        }
                    }, {
                        new: true
                    }, function (err, result) {
                        log.info(seq + "未返回兑奖状态,修改状态为等待兑奖")
                    })
                }
            }
        }
    })
};

/**
 * 处理打印模式终端机心跳数据
 *
 * @param headNode
 * @param bodyNode
 */

TerminalControl.prototype.handle2000 = function (headNode, bodyNode) {
    var self = this;
    var terminalId = headNode.terminalId;
    async.waterfall([
        function (cb) {
            var have = true;
            for (var i = 0; i < terminalArray.length; i++) {
                if (terminalId == terminalArray[i].terminalId) {
                    terminalArray[i].status = terminalCons.terminal.status.print;
                    terminalArray[i].terminal.status = terminalCons.terminal.status.print;
                    have = false;
                }
            }
            cb(null, terminalId, have);
        },
        function (terminalId, have, cb) {
            mongoDBUtil.db.collection('terminal', {
                safe: true
            }, function (err, collection) {
                collection.findAndModify({
                    'id': terminalId
                }, {
                    'id': -1
                }, {
                    $set: {
                        status: terminalCons.terminal.status.print
                    }
                }, {
                    new: true
                }, function (err, result) {
                    var msg = JSON.stringify(result);
                    self.io.emit('statusChange', msg);
                    //log.info('已指定终端机' + result.id + '为打印');
                    if (have) {
                        var terminal = new ticketTask(result, self);
                        terminalArray.push(terminal);
                    }
                    cb(null);
                })
            })
        }
    ], function (err, result) {
        if (err) {
            log.error('err: ', err); // -> null
        }
    });
    var backHeadNode = {
        cmd: headNode.cmd,
        sequenceId: headNode.sequenceId,
        retCode: terminalCons.retCode.success.code,
        retDesc: terminalCons.retCode.success.desc,
        terminalId: headNode.terminalId
    };
    self.sendRepMsg(backHeadNode);
};



/**
 * 处理忙碌模式终端机心跳数据
 *
 * @param headNode
 * @param bodyNode
 */

TerminalControl.prototype.handle0011 = function (headNode, bodyNode) {
    var self = this;
    var terminalId = headNode.terminalId;
    async.waterfall([
        function (cb) {
            var have = true;
            for (var i = 0; i < terminalArray.length; i++) {
                if (terminalId == terminalArray[i].terminalId) {
                    terminalArray[i].status = terminalCons.terminal.status.busy;
                    terminalArray[i].terminal.status = terminalCons.terminal.status.busy;
                    have = false;
                }
            }
            cb(null, terminalId, have);
        },
        function (terminalId, have, cb) {
            mongoDBUtil.db.collection('terminal', {
                safe: true
            }, function (err, collection) {
                collection.findAndModify({
                    'id': terminalId
                }, {
                    'id': -1
                }, {
                    $set: {
                        status: terminalCons.terminal.status.busy
                    }
                }, {
                    new: true
                }, function (err, result) {
                    var msg = JSON.stringify(result);
                    self.io.emit('statusChange', msg);
                    //log.info('已指定终端机' + result.id + '为打印');
                    if (have) {
                        var terminal = new ticketTask(result, self);
                        terminalArray.push(terminal);
                    }
                    cb(null);
                })
            })
        },
        function(cb){
            var backHeadNode = {
                cmd: headNode.cmd,
                sequenceId: headNode.sequenceId,
                retCode: terminalCons.retCode.success.code,
                retDesc: terminalCons.retCode.success.desc,
                terminalId: headNode.terminalId
            };
            self.sendRepMsg(backHeadNode);
        }
    ], function (err, result) {
        if (err) {
            log.error('err: ', err); // -> null
        }else{
            mongoDBUtil.db.collection('waitTerminal' + terminal.terminalName, {safe: true}, function (err, collection) {
                collection.find().toArray(function (err, tickets) {
                    //获取到所有等待返回的票,准备处理
                    for (var i = 0; i < tickets.length; i++) {
                        var headNode = {
                            cmd: '0005',
                            sequenceId: uuid.v4().replace(/\-/g, ''),
                            terminalId: terminal.terminalId
                        };
                        var bodyNode = {
                            ticketid: ticket.id
                        };
                        self.send0005(headNode, bodyNode);
                    }
                })
            })
        }
    });


};


TerminalControl.prototype.handle0072 = function (headNode, bodyNode) {
    log.info('---handle0072---');
    log.info(bodyNode.data);
};


TerminalControl.prototype.handle0032 = function (headNode, bodyNode) {
    var self = this;
    log.info('---handle' + headNode.cmd + '---');
    //0032/0033用于处理错误票,此时应先将该票放入失败库,然后通知平台票出失败了
    //首先获取该票所在的库
    log.info(headNode);
    log.info(bodyNode);
    if (!bodyNode.ticketId) {
        return;
    }
    var ticketId = bodyNode.ticketId;

    mongoDBUtil.db.collection('terminal', {safe: true}, function (err, collection) {
        collection.findOne({'id': headNode.terminalId}, function (err, terminal) {
            if (terminal) {
                var name = 'waitTerminal' + terminal.terminalName;
                mongoDBUtil.db.collection(name, {safe: true}, function (err, _coll) {
                    _coll.findAndRemove({'id': ticketId}, [], function (err, _ticket) {
                        mongoDBUtil.db.collection('failTicket', {safe: true}, function (err, __coll) {
                            if (!_ticket) {
                                log.info('不存在的票据 : ' + bodyNode.ticketId);
                            } else {
                                //通知平台失败
                                nodePlatAssist.sentFailed(_ticket, function (err, backMsgNode) {
                                    if (!err) {
                                        delete _ticket['_id'];
                                        //新增失败信息,失败代码
                                        _ticket.failInfo = bodyNode.retCode;
                                        _ticket.failType = bodyNode.retDesc;
                                        _ticket.terminalReturnTime = new Date().getTime();
                                        __coll.insert(_ticket, function () {
                                        });
                                        if (headNode.cmd == '0033') {
                                            log.info('---发送0055---');
                                            var backHeadNode0005 = {
                                                cmd: '0055',
                                                sequenceId: headNode.sequenceId,
                                                terminalid: headNode.terminalId,
                                                retCode: terminalCons.retCode.success.code,
                                                retDesc: terminalCons.retCode.success.desc
                                            };
                                            var backBodyNode0005 = {
                                                ticketid: _ticket.id
                                            };
                                            self.send0053(backHeadNode0005, backBodyNode0005);
                                        }
                                    }
                                });
                                //入失败库
                            }
                        })
                    })
                })
            }
        });
    })
};


TerminalControl.prototype.handle0033 = function (headNode, bodyNode) {
    var self = this;
    log.info('---handle' + headNode.cmd + '---');
    //0032/0033用于处理错误票,此时应先将该票放入失败库,然后通知平台票出失败了
    //首先获取该票所在的库
    log.info(headNode);
    log.info(bodyNode);
    if (!bodyNode.ticketId) {
        return;
    }
    var ticketId = bodyNode.ticketId;

    mongoDBUtil.db.collection('terminal', {safe: true}, function (err, collection) {
        collection.findOne({'id': headNode.terminalId}, function (err, terminal) {
            if (terminal) {
                var name = 'waitTerminal' + terminal.terminalName;
                mongoDBUtil.db.collection(name, {safe: true}, function (err, _coll) {
                    _coll.findAndRemove({'id': ticketId}, [], function (err, _ticket) {
                        mongoDBUtil.db.collection('failTicket', {safe: true}, function (err, __coll) {
                            if (!_ticket) {
                                log.info('不存在的票据 : ' + bodyNode.ticketId);
                            } else {
                                //通知平台失败
                                nodePlatAssist.sentFailed(_ticket, function (err, backMsgNode) {
                                    if (!err) {
                                        delete _ticket['_id'];
                                        //新增失败信息,失败代码
                                        _ticket.failInfo = bodyNode.retCode;
                                        _ticket.failType = bodyNode.retDesc;
                                        _ticket.terminalReturnTime = new Date().getTime();
                                        __coll.insert(_ticket, function () {
                                        });
                                        if (headNode.cmd == '0033') {
                                            log.info('---发送0055---');
                                            var backHeadNode0005 = {
                                                cmd: '0055',
                                                sequenceId: headNode.sequenceId,
                                                terminalid: headNode.terminalId,
                                                retCode: terminalCons.retCode.success.code,
                                                retDesc: terminalCons.retCode.success.desc
                                            };
                                            var backBodyNode0005 = {
                                                ticketid: _ticket.id
                                            };
                                            self.send0053(backHeadNode0005, backBodyNode0005);
                                        }
                                    }
                                });
                                //入失败库
                            }
                        })
                    })
                })
            }
        });
    })
};


TerminalControl.prototype.handle0054 = function (headNode, bodyNode) {
    var self = this;
    log.info('---handle' + headNode.cmd + '---');
    //0032/0033用于处理错误票,此时应先将该票放入失败库,然后通知平台票出失败了
    //首先获取该票所在的库
    log.info(bodyNode.retCode);
    log.info(bodyNode.retDesc);
    self.failHandler(headNode, bodyNode);
};


TerminalControl.prototype.handle4000 = function (headNode, bodyNode) {
    var self = this;
    log.info('----handle4000----');
    log.info(headNode);
    //终端机要死机,先从等待返回库中移走这些票,再改数组中状态,最后修改数据库的状态
    //需要消息回执
    var terminalId = headNode.terminalId;
    //step 1,从等待返回库中移走这些票
    for (var i = 0; i < terminalArray.length; i++) {
        var terminal = terminalArray[i];
        if (terminal.terminal.id == terminalId) {
            terminalArray.splice(i, 1);
        }
    }
    self.deadHandler(headNode);
};


TerminalControl.prototype.handle4001 = function (headNode, bodyNode) {
    var self = this;
    log.info('----handle4001----');
    log.info(headNode);
    //终端机要死机,先从等待返回库中移走这些票,再改数组中状态,最后修改数据库的状态
    //需要消息回执
    var terminalId = headNode.terminalId;
    //step 1,从等待返回库中移走这些票
    for (var i = 0; i < terminalArray.length; i++) {
        var terminal = terminalArray[i];
        if (terminal.terminal.id == terminalId) {
            terminal.status = terminalCons.terminal.status.busy;
            terminal.terminal.status = terminalCons.terminal.status.busy;
            var msg = JSON.stringify(terminal.terminal);
            log.error('终端机' + terminal.terminalId + ' 指定忙碌');
            log.error(msg);
            self.io.emit('statusChange', msg);
        }
    }
};


TerminalControl.prototype.deadHandler = function (headNode) {
    var self = this;
    //打印模式死机
    mongoDBUtil.db.collection('terminal', {safe: true}, function (err, collection) {
        collection.findAndModify({id: headNode.terminalId}, {}, {$set: {status: terminalCons.terminal.status.notAvailable}}, {new: true}, function (err, terminal) {
            //通知界面
            if (terminal) {
                var msg = JSON.stringify(terminal);
                self.io.emit('statusChange', msg);
                mongoDBUtil.db.collection('waitTerminal' + terminal.terminalName, {safe: true}, function (err, _coll) {
                    _coll.find({}).toArray(function (err, tickets) {
                        async.each(tickets, function (ticket, callback) {
                            mongoDBUtil.db.collection('waitTerminalTicket', {safe: true}, function (err, _col) {
                                delete ticket['_id'];
                                _col.insert(ticket, function () {
                                    //已添加到等待取走库
                                    callback(null);
                                })
                            })
                        }, function (err) {
                            var _backHeadNode = {
                                cmd: '4000',
                                sequenceId: headNode.sequenceId,
                                retCode: terminalCons.retCode.success.code,
                                retDesc: terminalCons.retCode.success.desc,
                                terminalId: headNode.terminalId
                            };
                            self.sendRepMsg(_backHeadNode);
                        })
                    });
                    _coll.remove({}, {safe: true}, function () {
                    })
                })
            } else {
                log.info('找不到的终端机' + headNode.terminalId);
            }
        })
    })
};

TerminalControl.prototype.connClose = function (remoteAddress) {
    var self = this;
    //把状态修改为不可用,从数组中移除.
    for (var i = 0; i < terminalArray.length; i++) {
        var terminal = terminalArray[i];
        if (terminal.terminal.address == remoteAddress) {
            terminalArray[i].status = terminalCons.terminal.status.notAvailable;
            terminalArray.splice(i, 1);
            mongoDBUtil.db.collection('terminal', {
                safe: true
            }, function (err, collection) {
                collection.findAndModify({
                    'id': terminal.terminal.id
                }, {
                    'id': -1
                }, {
                    $set: {
                        status: terminalCons.terminal.status.notAvailable
                    }
                }, {
                    new: true
                }, function (err, result) {
                    var msg = JSON.stringify(result);
                    self.io.emit('statusChange', msg);
                    log.error(msg);
                    log.info('更改终端机' + result.id + '状态为' + result.status);
                })
            })
        }
    }
};


TerminalControl.prototype.insert2History = function (terminalId, bonusInfo, seq) {
    mongoDBUtil.db.collection('TicketsWaitBonus', {
        safe: true
    }, function (err, collection) {
        collection.findAndRemove({
            'ticketSeq': seq
        }, [], function (err, result) {
            if (result) {
                var realBonus = 0;
                delete result['_id'];
                result.bonusCount = 0;
                if (bonusInfo.indexOf('上级兑奖机构兑奖') != -1) {
                    var arr = bonusInfo.split('\r\n');
                    async.each(arr, function (item) {
                        if (item.indexOf('合计') != -1) {
                            realBonus = parseInt(item.replace(/\D/g, ''));
                        }
                    }, function (err) {
                    });
                    result.bonusInfo = bonusInfo;
                    result.status = terminalCons.ticket.status.bigBonus;
                    result.realBonus = realBonus;
                    result.bonusCount = 1;
                    collection.insert(result, function () {
                        log.info(result.id + '已中大奖');
                    })
                } else {
                    if (bonusInfo.indexOf('应付金额') != -1) {
                        result.bonusCount = 1;
                        var arr = bonusInfo.split('\r\n');
                        async.each(arr, function (item) {
                            if (item.indexOf('合计') != -1) {
                                realBonus = parseInt(item.replace(/\D/g, ''));
                            }
                        }, function (err) {
                        })
                    }
                    result.bonusTime = new Date().getTime();
                    result.realBonus = realBonus;
                    result.bonusInfo = bonusInfo;
                    result.bonusTerminalId = terminalId;
                    mongoDBUtil.db.collection('HadBonusTickets', {
                        safe: true
                    }, function (err, _coll) {
                        _coll.insert(result, function () {
                            log.info(result.ticketSeq + '已入Had兑奖库');
                        })
                    })
                }
            } else {
                log.info(err);
            }
        })
    });
};

TerminalControl.prototype.failHandler = function (headNode, bodyNode) {
    var self = this;
    var ticketId = bodyNode.ticketId;
    mongoDBUtil.db.collection('terminal', {safe: true}, function (err, collection) {
        collection.findOne({'id': headNode.terminalId}, function (err, terminal) {
            if (terminal) {
                mongoDBUtil.db.collection('waitTerminal' + terminal.terminalName, {safe: true}, function (err, _coll) {
                    _coll.findAndRemove({'id': ticketId}, [], function (err, ticket) {
                        if (ticket) {
                            mongoDBUtil.db.collection('failTicket', {safe: true}, function (err, __coll) {
                                log.info(ticketId);
                                //通知平台失败
                                nodePlatAssist.sentFailed(ticket, function (err, backMsgNode) {
                                    if(!err){
                                        delete ticket['_id'];
                                        //新增失败信息,失败代码
                                        ticket.failInfo = bodyNode.retCode;
                                        ticket.failType = bodyNode.retDesc;
                                        ticket.terminalReturnTime = new Date().getTime();
                                        //入失败库
                                        __coll.insert(ticket, function () {
                                        });
                                        //通知终端机失败
                                        log.info('---发送0055---');
                                        var backHeadNode0005 = {
                                            cmd: '0055',
                                            sequenceId: headNode.sequenceId,
                                            terminalid: headNode.terminalId,
                                            retCode: terminalCons.retCode.success.code,
                                            retDesc: terminalCons.retCode.success.desc
                                        };
                                        var backBodyNode0005 = {
                                            ticketid: ticket.id
                                        };
                                        self.send0053(backHeadNode0005, backBodyNode0005);
                                    }
                                });
                            })
                        }
                    })
                })
            }
        });
    })
};


/**
 * 2.1.7.1    出票请求消息(命令码:0002)
     请求消息: [服务器->终端机]
 * @param headNode
 * @param bodyNode
 *
 * packagenum    4    int    总的包个数
 * namelen    4    int    保存文件名长度
 * namedata        var_string( 不定长)    文件名的内容
 * datalen    4    int    数据内容长度
 * data        var_string(不定长)    数据内容
 *
 */
TerminalControl.prototype.send0002 = function (headNode, bodyNode) {
    var self = this;
    async.waterfall([
        function (cb) {
            /**
             * 第一步,计算总长度
             * 1.headNode长度为48不变
             * 2.bodyNode的长度为12+namedata+data的
             */
            var totalLength = 52;
            for (var i = 0; i < bodyNode.tickets.length; i++) {
                totalLength += bodyNode.tickets[i].namelen + bodyNode.tickets[i].datalen + 8;
            }
            cb(null, totalLength)
        },
        function (totalLength, cb) {
            //log.info(totalLength);
            //先写头
            var head = headNode.cmd + headNode.sequenceId + headNode.terminalId;
            var result = new Buffer(head, msgParam.encoding);
            //log.info(totalLength);
            var buf = new Buffer(totalLength);
            buf.writeInt32BE(totalLength - 4, 0);
            result.copy(buf, 4, 0, result.length);
            //写入总的包个数
            result = new Buffer(4);
            result.writeUInt32BE(bodyNode.tickets.length, 0);
            result.copy(buf, 48, 0, result.length);
            //写入保存文件名长度,注意从此处开始要循环写入了
            //记录位置
            cb(null, buf)
        },
        function (buf, cb) {
            var result;
            var index = 52;
            for (var i = 0; i < bodyNode.tickets.length; i++) {
                result = new Buffer(4);
                //写保存文件名长度
                result.writeInt32BE(bodyNode.tickets[i].namelen, 0);
                result.copy(buf, index, 0, result.length);
                index += 4;
                //写入保存文件名
                result = new Buffer(bodyNode.tickets[i].namedata);
                result.copy(buf, index, 0, result.length);
                index += bodyNode.tickets[i].namelen;
                //写入数据内容长度
                result = new Buffer(4);
                result.writeInt32BE(bodyNode.tickets[i].datalen, 0);
                result.copy(buf, index, 0, result.length);
                index += 4;
                //写入数据内容
                result = new Buffer(bodyNode.tickets[i].data);
                result.copy(buf, index, 0, result.length);
                index += bodyNode.tickets[i].datalen;
            }
            cb(null, buf);

        },
        function (buf, cb) {
            self.sendBuf(buf);
            log.info('---send0002已发送---');
            log.info(headNode);
            log.info(bodyNode);
        }
    ], function (err, result) {
        if (err) {
            log.info('err: ', err); // -> null
            log.info('result: ', result); // -> 16
        }
    })
};


/**
 * 2.1.7.1    打印票(命令码:0004)
     请求消息: [服务器->终端机]
 * @param headNode
 * @param bodyNode
 *
 *
 */

TerminalControl.prototype.send0004 = function (headNode, bodyNode) {
    var self = this;
    async.waterfall([
        function (cb) {
            /**
             * 第一步,计算总长度
             * 1.headNode长度为48不变
             * 2.bodyNode长度为 52 + dataLen + nameLen + 8 + 4
             */
            var totalLength = 48 + bodyNode.nameLen + bodyNode.dataLen + 8 + 4;
            cb(null, totalLength)
        },
        function (totalLength, cb) {
            //先写头
            var head = headNode.cmd + headNode.sequenceId + headNode.terminalId;
            var result = new Buffer(head);
            var buf = new Buffer(totalLength);
            buf.writeInt32BE(totalLength - 4, 0);
            result.copy(buf, 4, 0, result.length);
            //写入总的包个数
            result = new Buffer(4);
            result.writeUInt32BE(bodyNode.packageNum, 0);
            result.copy(buf, 48, 0, result.length);
            //写入保存文件名长度
            result = new Buffer(4);
            result.writeInt32BE(bodyNode.nameLen, 0);
            result.copy(buf, 52, 0, result.length);
            //写入保存文件名
            result = new Buffer(bodyNode.nameData);
            result.copy(buf, 56, 0, bodyNode.nameLen);

            //写入数据长度
            result = new Buffer(4);
            result.writeInt32BE(bodyNode.dataLen, 0);
            result.copy(buf, 56 + bodyNode.nameLen, 0, result.length);

            //写入数据,转换中文
            result = new Buffer(bodyNode.data, 'base64');
            result.copy(buf, 60 + bodyNode.nameLen, 0, bodyNode.dataLen);
            cb(null, buf);
        },
        function (buf, cb) {
            self.sendBuf(buf);
            log.info('---send0004已发送---');
            log.info(headNode);
            log.info(bodyNode);
        }
    ], function (err, result) {
        if (err) {
            log.info('err: ', err); // -> null
        }
    })
};


TerminalControl.prototype.send0005 = function (headNode, bodyNode) {
    var self = this;

    /**
     * 先计算总长度
     * head : 4+4+32
     * body : 32
     */
    var totalLength = 4 + 4 + 32 + 8 + 32;
    var head = headNode.cmd + headNode.sequenceId + headNode.terminalId;
    var result = new Buffer(head, msgParam.encoding);

    var buf = new Buffer(totalLength);
    buf.writeInt32BE(totalLength - 4, 0);
    result.copy(buf, 4, 0, result.length);

    //写入ticketId
    result = new Buffer(bodyNode.ticketid, msgParam.encoding);
    result.copy(buf, 48, 0, result.length);

    self.sendBuf(buf);

    log.info('---send0005已发送---');
    log.info(headNode);
    log.info(bodyNode);
};

/**
 * 查询额度
 */

TerminalControl.prototype.send0008 = function (headNode) {
    var self = this;
    /**
     * 先计算总长度
     * head : 4+4+32
     */
    var self = this;
    var content = headNode.cmd + headNode.sequenceId + headNode.terminalId;
    var contentBuf = new Buffer(content);
    var buf = new Buffer(contentBuf.length + 4);
    buf.writeInt32BE(contentBuf.length, 0);
    contentBuf.copy(buf, 4, 0, contentBuf.length);
    self.sendBuf(buf);

    log.info('---send0008已发送---');
    log.info(headNode);
};

TerminalControl.prototype.handle0081= function(headNode, bodyNode){
    var self = this;
    log.info('----handle0081----');
    log.info(headNode);
    log.info(bodyNode);
    //终端机要死机,先从等待返回库中移走这些票,再改数组中状态,最后修改数据库的状态
    //需要消息回执
    var terminalId = headNode.terminalId;
    //step 1,从等待返回库中移走这些票
    for (var i = 0; i < terminalArray.length; i++) {
        var terminal = terminalArray[i];
        if (terminal.terminal.id == terminalId) {
            terminal.amount = parseFloat(bodyNode.amount);
            mongoDBUtil.db.collection('terminal', {
                safe: true
            }, function (err, collection) {
                collection.findAndModify({
                    'id': headNode.terminalId
                }, {}, {
                    $set: {
                       amount: parseFloat(bodyNode.amount)
                    }
                }, {
                    new: true
                }, function (err, result) {
                    if (err) {
                        log.info(err);
                    } else {
                        log.info(result);
                    }
                })
            });
        }
    }
}

TerminalControl.prototype.handle0082= function(headNode, bodyNode){
    log.info('---handle0052---');
    log.info(bodyNode);
}


/**
 * 2.1.7.1    终端机模式切换(命令码:0009)
     请求消息: [服务器->终端机]
 * @param headNode
 * @param bodyNode
 *
 *
 */
TerminalControl.prototype.send0009 = function (headNode, bodyNode) {
    var self = this;
    /**
     * 先计算总长度
     * head : 4+4+32+8
     * body : 4
     */
    var totalLength = 4 + 4 + 32 + 8 + 4;
    var head = headNode.cmd + headNode.sequenceId + headNode.terminalId;
    var result = new Buffer(head, msgParam.encoding);

    var buf = new Buffer(totalLength);
    buf.writeInt32BE(totalLength - 4, 0);
    result.copy(buf, 4, 0, result.length);

    result = new Buffer(4);
    result.writeInt32BE(bodyNode.switchPrize, 0);
    result.copy(buf, 48, 0, result.length);
    self.sendBuf(buf);
    log.info('---send0009已发送---');
    log.info(headNode);
    log.info(bodyNode);
};


TerminalControl.prototype.send0053 = function (headNode, bodyNode) {
    var self = this;

    /**
     * 先计算总长度
     * head : 4+4+32+8
     * body : 32
     */

    var head = headNode.cmd + headNode.sequenceId + headNode.terminalid + headNode.retCode + headNode.retDesc;
    var result = new Buffer(head, msgParam.encoding);
    var totalLength = result.length + 32 + 4;

    var buf = new Buffer(totalLength);
    buf.writeInt32BE(totalLength - 4, 0);
    result.copy(buf, 4, 0, result.length);


    //写入ticketId
    result = new Buffer(bodyNode.ticketid, msgParam.encoding);
    result.copy(buf, totalLength - 32, 0, result.length);

    self.sendBuf(buf);
    log.info('---send0053已发送---');
    log.info(headNode);
    log.info(bodyNode);
};


TerminalControl.prototype.send0007 = function (headNode, bodyNode) {
    var self = this;
    log.error(headNode);
    log.error(bodyNode);
    async.waterfall([
        function (cb) {
            /**
             * 第一步,计算总长度
             * 1.headNode长度为48不变
             * 2.bodyNode长度为 52 + 4 + 4 + name
             */
            var totalLength = 52 + 4 + bodyNode.metaTicketName.length + 4;
            var dataLength = 0;
            for (var i = 0; i < bodyNode.tickets.length; i++) {
                dataLength += bodyNode.tickets[i].metaTicket.length;
            }
            totalLength += dataLength;
            cb(null, totalLength, dataLength)
        },
        function (totalLength, dataLength, cb) {
            //先写头
            var head = headNode.cmd + headNode.sequenceId + headNode.terminalId;
            var result = new Buffer(head, msgParam.encoding);
            var buf = new Buffer(totalLength);
            buf.writeInt32BE(totalLength - 4, 0);
            result.copy(buf, 4, 0, result.length);
            //写入总的包个数
            result = new Buffer(4);
            result.writeUInt32BE(1, 0);
            result.copy(buf, 48, 0, result.length);
            //写入保存文件名长度
            result = new Buffer(4);
            result.writeInt32BE(bodyNode.metaTicketName.length, 0);
            result.copy(buf, 52, 0, result.length);
            //写入保存文件名
            result = new Buffer(bodyNode.metaTicketName);
            result.copy(buf, 56, 0, result.length);
            //写入数据长度
            result = new Buffer(4);
            result.writeInt32BE(dataLength, 0);
            result.copy(buf, 56 + bodyNode.metaTicketName.length, 0, result.length);
            cb(null, buf, dataLength);

        },
        function (buf, dataLength, cb) {
            var result;
            var index = 56 + bodyNode.metaTicketName.length + 4;
            for (var i = 0; i < bodyNode.tickets.length; i++) {
                //写入数据内容
                result = new Buffer(bodyNode.tickets[i].metaTicket);
                result.copy(buf, index, 0, result.length);
                index += bodyNode.tickets[i].metaTicket.length;
            }
            cb(null, buf);

        },
        function (buf, cb) {
            self.sendBuf(buf);
            log.info('---send0007已发送---');
            log.info(headNode);
            log.info(bodyNode);
            log.info(buf.length);
        }
    ], function (err, result) {
        if (err) {
            log.info('err: ', err); // -> null
            log.info('result: ', result); // -> 16
        }
    })
};



TerminalControl.prototype.handle9999 = function(){
    log.info("接受到9999 处理 9999");
    async.waterfall([
        //修改所有终端机为kill 状态
        function(cb){
            for(var i =0 ; i< terminalArray.length; i++){
                terminalArray[i].status = terminalCons.terminal.status.kill;
                terminalArray[i].terminal.status = terminalCons.terminal.status.kill;
            }
            cb(null);
        },
        function(cb){
            var array = [];
            //修改终端机状态
            async.each(terminalArray, function(terminal, callback){
                mongoDBUtil.db.collection('terminal', {safe : true}, function(err, conn){
                    conn.findAndModify({id: terminal.terminalId},{'id':-1},{$set:{status: terminalCons.terminal.status.kill}},{},function(err, data){
                        array.push(terminal.terminalId);
                        //如果等待出票的有北邮出完的票全部移动会等待出票队列
                        if(data){
                            mongoDBUtil.db.collection('waitTerminal' + data.terminalName, {safe : true}, function(err, connection){
                                connection.find({}).toArray(function(err, tickets){
                                    if(tickets){
                                        async.each(tickets, function(ticket, call){
                                            delete  ticket["_id"];
                                            mongoDBUtil.db.collection('waitTerminalTicket', {safe : true}, function(err, waitTerm) {
                                                waitTerm.insert(ticket, function(err, reuslt){
                                                    connection.remove({id:  ticket.id}, function(err){
                                                        call(err);
                                                    })
                                                })
                                            })
                                        },function(err, result){
                                            callback(err);
                                        });
                                    }else{
                                        callback(null);
                                    }
                                });
                            })
                        }else{
                            callback(null);
                        }
                    })
                })
            },function(err ,result){
                cb(err, array);
            });
        }
    ],function(err,array){
        var obj = {terminal:array , status: terminalCons.terminal.status.kill};
        log.info(JSON.stringify(obj));
        webIo.io.emit('ErrorStatus', JSON.stringify(obj));
        if(err)
        log.error(err)
    })
}

TerminalControl.prototype.send8000 = function (headNode, bodyNode) {
    var self = this;
    var name = "inputdelay.conf";
    async.waterfall([
        function (cb) {
            /**
             * 第一步,计算总长度
             * 1.headNode长度为48不变
             * 2.bodyNode长度为 52 + 4 + 4 + name
             */
            var totalLength = 52 + 4 + name.length + 4;
            var data = "";
            for(var key in bodyNode){
                var value = 2;
                if(key != "start_sleep" && key != "stop_sleep"){
                    value = bodyNode[key] * 1000000;
                }else{
                    value = bodyNode[key];
                }
                var temp = key + ":" + value + "\n";
                data += temp;
            }
            log.info("data: " + data);
            var dataLength = data.length;
            totalLength += dataLength;
            cb(null, totalLength, dataLength, data)
        },
        function (totalLength, dataLength, data, cb) {
            //先写头
            var head = headNode.cmd + headNode.sequenceId + headNode.terminalId;
            var result = new Buffer(head, msgParam.encoding);
            var buf = new Buffer(totalLength);
            buf.writeInt32BE(totalLength - 4, 0);
            result.copy(buf, 4, 0, result.length);
            //写入总的包个数
            result = new Buffer(4);
            result.writeUInt32BE(1, 0);
            result.copy(buf, 48, 0, result.length);
            //写入保存文件名长度
            result = new Buffer(4);
            result.writeInt32BE(name.length, 0);
            result.copy(buf, 52, 0, result.length);
            //写入保存文件名
            result = new Buffer(name);
            result.copy(buf, 56, 0, result.length);
            //写入数据长度
            result = new Buffer(4);
            result.writeInt32BE(dataLength, 0);
            result.copy(buf, 56 + name.length, 0, result.length);

            var index = 56 + name.length + 4;

            result = new Buffer(data);
            result.copy(buf, index, 0, result.length);

            cb(null, buf);

        },
        function (buf, cb) {
            self.sendBuf(buf);
            log.info('---send8000已发送---');
        }
    ], function (err, result) {
        if (err) {
            log.info('err: ', err); // -> null
            log.info('result: ', result); // -> 16
        }
    })
};

TerminalControl.prototype.handle8001=function(){
      log.info("不用处理");
}

TerminalControl.prototype.handle8002=function(){
    log.info("不用处理");
}

module.exports = TerminalControl;
