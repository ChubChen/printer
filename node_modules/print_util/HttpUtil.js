/**
 * Created by w44 on 15-1-12.
 */
var http = require('http');
var querystring = require('querystring');
var moment = require('moment');

var cons = require('print_constants');
var nodePlatCons = cons.nodePlatCons;

var print_util = require('print_config');
var prop = print_util.prop;

var digestUtil = require('./DigestUtil');
var log = require("./Log4js.js")[0];

var HttpUtil = function () {
};


HttpUtil.prototype.send = function (opt, data, cb) {
    log.info("post send：" + JSON.stringify(data));
    log.info("post：" + JSON.stringify(opt));
    var post_data = querystring.stringify({
        message: data
    });
    var req = http.request(opt, function (res) {
        var data = '';
        res.setEncoding('utf8');
        res.on('data', function (chunk) {
            if (res.statusCode == 200) {
                data += chunk;
            } else {
                log.info('服务器返回的状态码有误');
                log.info(chunk);
                setTimeout(function () {
                    cb('err', null);
                }, 1000);
            }
        });
        res.on('end', function () {
            log.info('服务器返回信息');
            log.info(data);
            cb(null, data);
        });
    });

    req.on('error', function (e) {
        log.info('problem with request: ' + e.message);
        setTimeout(function () {
            cb('err', body);
        }, 1000);
    });
    req.write(post_data, "utf8");
    req.end();
};


HttpUtil.prototype.getT05WinNumber = function (cb) {
    var opt = {
        hostname: 'chart.icaile.com',
        port: 80,
        path: '/include/ajax_115_lhlx.php?type=526&num=18&timestemp=' + new Date().getTime(),
        method: 'POST'
    };
    var req = http.request(opt, function (res) {
        res.setEncoding('utf8');
        var data = '';
        res.on('data', function (chunk) {
            data += chunk;
        });
        res.on('end', function () {
            cb(null, data);
        });
    });

    req.setTimeout(20000, function () {
        cb(new Error("time out"), null);
    });
    req.on('error', function (e) {
        cb(e, null);
    });
    req.end();
};


HttpUtil.prototype.sendToNodePlat = function (cmd, body, cb) {
    body.uniqueId = digestUtil.createUUID();
    var bodyStr = JSON.stringify(body);

    var head = nodePlatCons.head;
    head.cmd = cmd;
    head.timestamp = moment().format("YYYY-MM-DD HH:mm:ss");
    var encodedBody = bodyStr;
    if (head.digestType.length > 0) {
        encodedBody = digestUtil.generate(head, nodePlatCons.key, bodyStr);
    }
    var msgJson = {head: head, body: encodedBody};
    var msgToSend = JSON.stringify(msgJson);
    var post_data = querystring.stringify({
        message: msgToSend
    });
    var headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Content-Length': post_data.length
    };
    prop.node_plat_opt.headers = headers;
	
    var req = http.request(prop.node_plat_opt, function (res) {
        res.setEncoding('utf8');
        var data = '';
        res.on('data', function (chunk) {
            data += chunk;
			
        });
        res.on('end', function () {
            try {
              if(typeof data == "object"){
                  cb(null, data);
              }else{
                  var backData = JSON.parse(data);
                  cb(null, backData);
              }
            } catch (err) {
                log.error(err);
                log.error('平台访问有问题');
            }
        });
    });
    req.setTimeout(20000, function () {
        cb(new Error("time out"), null);
    });
    req.on('error', function (e) {
        cb(e, null);
    });
    req.write(post_data, "utf8");
    req.end();
};

//处理p02请求
HttpUtil.prototype.sendToNodePlatP02 = function (cmd, body, cb) {
	  
    body.uniqueId = digestUtil.createUUID();
    var bodyStr = JSON.stringify(body);
    var rst = body.rst;
    var status = rst[0].status;
    var cp_id = rst[0].id;
    var seq = rst[0].seq;
    var passw = rst[0].passw;
    var rNumber = rst[0].rNumber;
 
    log.info("cp_id ======== " + cp_id);
    log.info("seq ======== " + seq);
    log.info("status ======== " + status);
    log.info("passw ======== " + passw);
    log.info("rNumber ======== " + rNumber);
    var opt = {
    	  hostname: '10.16.1.13',
        port: 9010,
        path: '/out/sendTicketLogic.do?status=' + status + '&cp_id='+ cp_id +'&logicNum=102' + '&seq='+seq + '&passw='+ passw + '&rNumber='+ rNumber,
        method: 'POST'
    }
	
    var req = http.request(opt, function (res) {
        res.setEncoding('utf8');
        var data = '';
        res.on('data', function (chunk) {
            data += chunk;
			
        });
		
        res.on('end', function () {
            try {
 
            	 log.info("data ===="+data );

                var backData = JSON.parse(data);
 
 
                
                 log.info("backData ===="+backData );

                               cb(null, backData);
            } catch (err) {
                log.error('平台访问有问题');
            }
        });
    });
    req.setTimeout(20000, function () {
        cb(new Error("time out"), null);
    });
    req.on('error', function (e) {
        cb(e, null);
    });
    req.end();
};
//修改票状态
HttpUtil.prototype.updateTicketStatus = function (body,cb) {
	log.info("body.ticketStatus = " + body.ticketStatus);
	log.info("body.ticketId = " + body.ticketId);
    var opt = {
    	  hostname: '10.16.1.13',
        port: 9010,
        path: '/out/sendTicketLogic.do?status=' + body.ticketStatus + '&cp_id='+ body.ticketId +'&logicNum=102',
        method: 'POST'
    }
    
    var req = http.request(opt, function (res) {
        res.setEncoding('utf8');
        var data = '';
        res.on('data', function (chunk) {
            data += chunk;
        });
        res.on('end', function () {
            try {
 
            	 log.info("data ===="+data );

                var backData = JSON.parse(data);
                
                 log.info("backData ===="+backData );
                 cb(null, backData);
                          
            } catch (err) {
                log.error('平台返回数据有问题');
            }
        });
    });
    req.setTimeout(20000, function () {
        cb(new Error("time out"), null);
    });
    req.on('error', function (e) {
        cb(e, null);
    });
    req.end();
};

//查询中奖cp_id
HttpUtil.prototype.getBounsTicketsId = function (cb) {
	
    var opt = {
    	  hostname: '10.16.1.13',
        port: 9010,
        path: '/out/sendTicketLogic.do?logicNum=104',
        method: 'POST'
    }
    
    var req = http.request(opt, function (res) {
        res.setEncoding('utf8');
        var data = '';
        res.on('data', function (chunk) {
            data += chunk;
        });
        res.on('end', function () {
            try {
            	 log.info("中奖票bounsTicketsId ====" + data );

                var backData = JSON.parse(data);
                
                 log.info("backData is cp_id ====" + backData );
                 cb(null, backData);
                          
            } catch (err) {
                log.error('平台返回中奖票id数据有问题');
            }
        });
    });
    req.setTimeout(20000, function () {
        cb(new Error("time out"), null);
    });
    req.on('error', function (e) {
        cb(e, null);
    });
    req.end();
};


HttpUtil.prototype.sendBouns2NodePlat = function (body,cb) {
    var bodyStr = JSON.stringify(body);
    var head = nodePlatCons.head;
    head.cmd = "P06";
    head.timestamp = moment().format("YYYY-MM-DD HH:mm:ss");
    var encodedBody = bodyStr;
    if (head.digestType.length > 0) {
        encodedBody = digestUtil.generate(head, nodePlatCons.key, bodyStr);
    }
    var msgJson = {head: head, body: encodedBody};
    var msgToSend = JSON.stringify(msgJson);
    var post_data = querystring.stringify({
        message: msgToSend
    });
    var headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Content-Length': post_data.length
    };
    prop.node_plat_opt.headers = headers;

    var req = http.request(prop.node_plat_opt, function (res) {
        res.setEncoding('utf8');
        var data = '';
        res.on('data', function (chunk) {
            data += chunk;

        });
        res.on('end', function () {
            try {
                if(typeof data == "object"){
                    cb(null, data);
                }else{
                    var backData = JSON.parse(data);
                    cb(null, backData);
                }
            } catch (err) {
                log.error(err);
                log.error('平台访问有问题');
            }
        });
    });
    req.setTimeout(20000, function () {
        cb(new Error("time out"), null);
    });
    req.on('error', function (e) {
        cb(e, null);
    });
    req.write(post_data, "utf8");
    req.end();
};


//查询对账数据
HttpUtil.prototype.queryNodePlatDatas = function (body,cb) {
    var bodyStr = JSON.stringify(body);
    log.info(bodyStr);
    var gameCode = body.gameCode;
    var status = body.status;
    var termCode = body.termCode;
    var startTime = body.startTime;
    var endTime = body.endTime;
    var opt = {
        hostname: '10.16.1.13',
        port: 9010,
        path: '/out/sendTicketLogic.do?logicNum=106&gameCode='+gameCode+'&status='+status+'&termCode='+termCode+'&startTime='+startTime+'&endTime='+endTime,
        method: 'POST'
    }
    
    var req = http.request(opt, function (res) {
        res.setEncoding('utf8');
        var data = '';
        res.on('data', function (chunk) {
            data += chunk;
        });
        res.on('end', function () {
            try {
                var backData = JSON.parse(data);
                 log.info("对账数据backData is" + backData );
                 cb(null, backData);          
            } catch (err) {
                log.error('平台返回对账数据有问题');
            }
        });
    });
    req.setTimeout(20000, function () {
        cb(new Error("time out"), null);
    });
    req.on('error', function (e) {
        cb(e, null);
    });
    req.end();
};

var httpUtil = new HttpUtil();
module.exports = httpUtil;