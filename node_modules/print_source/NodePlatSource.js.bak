/**
 * Created by w44 on 15-1-12.
 */

var CronJob = require('cron').CronJob;
var nodePlatAssist = require('print_assist').nodePlatAssist;

var util = require('print_util');
var mongoDBUtil = util.mongoDBUtil;
var digestUtil = require('print_util').digestUtil;
var log = util.log;

var cons = require('print_constants');
var nodePlatCons = cons.nodePlatCons;

var async = require('async');

var NodePlatSource = function () {
};

NodePlatSource.prototype.handle = function () {
    var self = this;
    //开启获取待出票队列任务
    self.catchWaitQueenTask.start();
    self.catchWaitQueenTaskStatus = true;
};

NodePlatSource.prototype.catchWaitQueenTask = new CronJob('*/5 * * * * *', function () {
    log.info("###########################   get tickets to waitQueen    ###########################");
    NodePlatSource.prototype.getWaitTickets();
});


NodePlatSource.prototype.getWaitTickets = function () {
    nodePlatAssist.sentP01(function (err, backMsgNode) {
        if (err) {
            log.error(err);
        } else { 
        	log.info( "nodePlatCons.key ==========="+nodePlatCons.key );
  	log.info( "backMsgNode.body ==========="+backMsgNode.body+":"+typeof(digestUtil.check) );
 // var ddd = digestUtil.wocao();
   
            	 
            //获取到订单集合
           // var backBodyStr = digestUtil.check(backMsgNode.head, nodePlatCons.key, backMsgNode.body); 
               //     log.info( "backMsgNode.head 	1==========="+backMsgNode.head.digestType );
    
                log.info( "backBodyNode ==========="+JSON.stringify(backMsgNode.body) );
     
      var backBodyNode = backMsgNode.body; 
          


            var tickets = backBodyNode.rst; 
            
            log.info( "tickets ==========="+tickets );

            if (tickets.length == 0) {
                log.info("no tickets to print........");
                return;
            }
            //直接入等待票库
            mongoDBUtil.db.collection('waitTerminalTicket', {safe: true}, function (err, collection) {
                async.each(tickets, function (item) { 
                	
                    item.playTypeCode = item.pType;
                    item.betTypeCode = item.bType;
                    if (item.number) {
                        item.numbers = item.number;
                        delete  item.number;
                    }
                    delete  item.pType;
                    delete  item.bType;
                    //不足32位高位补0
                    var length = 32 - (item.id + '').length;
                    for (var i = 0; i < length; i++) {
                        item.id = '0' + item.id;
                    }
                    collection.insert(tickets, function () {
                        log.info(item.id + "已入等待终端处理库");
                    });
                }, function (err) {
                    log.info( "tickets ===rrrrrrr========" );

                });
            });
        }
    });
};


var nodePlatSource = new NodePlatSource();


module.exports = nodePlatSource;



